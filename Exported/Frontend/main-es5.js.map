{"version":3,"sources":["webpack:///src/app/main/users/users-editor/users-editor.component.ts","webpack:///src/app/main/users/users-editor/users-editor.component.html","webpack:///src/app/_dialogs/profile-dialog/profile-dialog.component.ts","webpack:///src/app/_dialogs/profile-dialog/profile-dialog.component.html","webpack:///src/app/_services/login.service.ts","webpack:///src/app/interceptor/auth.interceptor.ts","webpack:///src/environments/environment.ts","webpack:///src/app/main/buyer/buyer-edit/buyer-edit.component.ts","webpack:///src/app/main/buyer/buyer-edit/buyer-edit.component.html","webpack:///src/app/_dialogs/delete-dialog/delete-dialog.component.ts","webpack:///src/app/_dialogs/delete-dialog/delete-dialog.component.html","webpack:///src/app/main/users/users.component.ts","webpack:///src/app/main/users/users.component.html","webpack:///src/app/main/example/example.component.ts","webpack:///src/app/main/example/example.component.html","webpack:///src/app/main/buyer/buyer.component.ts","webpack:///src/app/main/buyer/buyer.component.html","webpack:///src/app/_helpers/snackbar-helper.service.ts","webpack:///src/app/main/building/building-edit/building-edit.component.ts","webpack:///src/app/main/building/building-edit/building-edit.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/main/example/example-editor/example-editor.component.ts","webpack:///src/app/main/example/example-editor/example-editor.component.html","webpack:///src/app/_helpers/editor-helper.service.ts","webpack:///src/app/app.module.ts","webpack:///src/app/main/building/building.component.ts","webpack:///src/app/main/building/building.component.html","webpack:///src/app/_services/menu.service.ts","webpack:///src/app/main/dashboard/dashboard.component.ts","webpack:///src/app/main/dashboard/dashboard.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/material.module.ts","webpack:///src/app/main/main.component.ts","webpack:///src/app/main/main.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["UsersEditorComponent","data","dialog","snackbarHelper","isEdit","user","saveData","subscribe","openSnackbar","closeAll","e","submit","ProfileDialogComponent","hidePassword","passwordRepeat","password","LoginService","localStorage","getItem","TokenInterceptor","router","loginService","refreshTokenInProgress","tokenRefreshedSource","tokenRefreshed$","asObservable","request","next","obs","addAuthHeader","handle","evt","error","status","url","indexOf","method","onUnauthorized","refreshToken","re","err","onForbidden","authHeader","getToken","clone","setHeaders","Authorization","token","undefined","Pragma","Expires","observer","complete","clear","navigateByUrl","alert","environment","production","BuyerEditComponent","route","editorHelper","example","selectExample","value","name","params","id","column1","column2","column3","column4","Date","column5","navigate","relativeTo","DeleteDialogComponent","UsersComponent","users","displayedColumns","dataSource","initData","userName","email","firstname","lastname","created","updated","paginator","sort","dialogRef","open","width","afterClosed","result","event","filterValue","target","filter","trim","toLowerCase","firstPage","create","applyFilter","ExampleComponent","examples","BuyerComponent","SnackbarHelperService","snackBar","text","color","duration","panelClass","horizontalPosition","verticalPosition","BuildingEditComponent","AppComponent","title","ExampleEditorComponent","EditorHelperService","editorConfig","editable","spellcheck","height","minHeight","maxHeight","minWidth","translate","enableToolbar","showToolbar","placeholder","defaultParagraphSeparator","defaultFontName","defaultFontSize","fonts","customClasses","tag","uploadWithCredentials","sanitize","toolbarPosition","toolbarHiddenButtons","AppModule","provide","useClass","multi","BuildingComponent","MenuService","main","components","displayName","iconName","settings","currentUrl","events","findMenuItem","setTimeout","urlAfterRedirects","menuItem","temp1","i","temp2","temp3","length","disabled","DashboardComponent","routes","path","component","children","AppRoutingModule","forRoot","LoginComponent","loginUser","doLogin","resp","setItem","authToken","login","MaterialModule","MainComponent","breakpointObserver","menuService","isSmallScreen","mainLength","componentsLength","settingsLength","isMatched","observe","matches","forEach","item","checkCurrentUrl","expanded","snav","close","editProfile","logout","bootstrapModule","console","webpackEmptyAsyncContext","req","Promise","resolve","then","Error","code","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { Users } from '../../../_models/users';\nimport { SnackbarHelperService } from '../../../_helpers/snackbar-helper.service';\nimport { Observable } from 'rxjs';\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-users-editor',\n  templateUrl: './users-editor.component.html',\n  styleUrls: ['./users-editor.component.scss']\n})\nexport class UsersEditorComponent implements OnInit {\n  public isEdit = false;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public user: Users = {};\n\n  constructor(\n    // TODO: Add model\n    @Inject(MAT_DIALOG_DATA) public data: Users,\n    private dialog: MatDialog,\n    private snackbarHelper: SnackbarHelperService\n  ) {}\n\n  ngOnInit(): void {\n    this.isEdit = this.data !== null;\n    this.user = this.isEdit ? this.data : {};\n  }\n\n  // SUBMIT FUNCTION FOR FORM\n  public submit(): void {\n    this.saveData().subscribe(\n      () => {\n        this.snackbarHelper.openSnackbar('Saved successfully');\n        this.dialog.closeAll();\n      },\n      (e: any) => {\n        this.snackbarHelper.openSnackbar('Error saving entry', 'bg-danger');\n        this.dialog.closeAll();\n      }\n    );\n  }\n\n  // CALL SERVICES FOR PUT OR POST\n  private saveData(): Observable<any> {\n    // TODO: Add service for PUT and POST\n    // if (this.isEdit) {\n    //   return this.userService.putUser(this.user);\n    // } else {\n    //   return this.userService.postUser(this.user);\n    // }\n    // TODO: Remove this line\n    return new Observable();\n  }\n}\n","<h1 mat-dialog-title *ngIf=\"!isEdit\">Create user</h1>\n<h1 mat-dialog-title *ngIf=\"isEdit\">Edit user</h1>\n<mat-divider></mat-divider>\n<br>\n<div mat-dialog-content>\n  <!-- TODO: Change formName -->\n  <form id=\"usersForm\" #usersForm=\"ngForm\">\n    <!-- TODO: Change ngModel and mat-label and errors -->\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Username</mat-label>\n      <input matInput type=\"text\" name=\"userName\" [(ngModel)]=\"user.userName\" required #userName=\"ngModel\" />\n      <mat-error *ngIf=\"(userName.dirty || userName.touched) && userName.errors && userName.errors.required\">\n        Required field\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Firstname</mat-label>\n      <input matInput type=\"text\" name=\"firstname\" [(ngModel)]=\"user.firstname\" required #firstname=\"ngModel\" />\n      <mat-error *ngIf=\"(firstname.dirty || firstname.touched) && firstname.errors && firstname.errors.required\">\n        Required field\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Lastname</mat-label>\n      <input matInput type=\"text\" name=\"lastname\" [(ngModel)]=\"user.lastname\" required #lastname=\"ngModel\" />\n      <mat-error *ngIf=\"(lastname.dirty || lastname.touched) && lastname.errors && lastname.errors.required\">\n        Required field\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>E-Mail Address</mat-label>\n      <input matInput type=\"email\" name=\"email\" [(ngModel)]=\"user.email\" required #email=\"ngModel\" />\n      <mat-error *ngIf=\"(email.dirty || email.touched) && email.errors && email.errors.required\">\n        Required field\n      </mat-error>\n      <mat-error\n        *ngIf=\"(email.dirty || email.touched) && email.errors && email.errors.invalid && email.errors.required\">\n        Invalid mail\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Password</mat-label>\n      <input matInput type=\"password\" name=\"password\" #password=\"ngModel\" [(ngModel)]=\"user.password\"\n        [required]=\"!isEdit\" />\n      <mat-error [hidden]=\"password.valid || password.pristine || isEdit\">Required field</mat-error>\n    </mat-form-field>\n\n  </form>\n</div>\n\n<div mat-dialog-actions class=\"pt-3\" align=\"end\">\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button type=\"submit\" color=\"primary\" (click)=\"submit()\" [disabled]=\"!usersForm.form.valid\">\n    Save\n  </button>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\nimport { Users } from '../../_models/users';\nimport { SnackbarHelperService } from '../../_helpers/snackbar-helper.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-profile-dialog',\n  templateUrl: './profile-dialog.component.html',\n  styleUrls: ['./profile-dialog.component.scss']\n})\nexport class ProfileDialogComponent implements OnInit {\n  public hidePassword = true;\n  public passwordRepeat = '';\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public user: Users = {};\n\n  constructor(\n    // TODO: Add model\n    @Inject(MAT_DIALOG_DATA) public data: Users,\n    private dialog: MatDialog,\n    private snackbarHelper: SnackbarHelperService\n  ) {}\n\n  ngOnInit(): void {\n    this.user = this.data;\n  }\n\n  // SUBMIT FUNCTION FOR FORM\n  public submit(): void {\n    if (this.passwordRepeat === this.user.password) {\n      this.saveData().subscribe(\n        () => {\n          this.snackbarHelper.openSnackbar('Saved successfully');\n          this.dialog.closeAll();\n        },\n        (e: any) => {\n          this.snackbarHelper.openSnackbar('Error saving entry', 'bg-danger');\n          this.dialog.closeAll();\n        }\n      );\n    } else {\n      this.snackbarHelper.openSnackbar('Passwords are different', 'bg-danger');\n    }\n  }\n\n  // CALL SERVICES FOR PUT OR POST\n  private saveData(): Observable<any> {\n    // TODO: Add service for edit password\n    //   return this.exampleService.putUserPassword(this.user);\n    // TODO: Remove this line\n    return new Observable();\n  }\n}\n","<h1 mat-dialog-title>Profile</h1>\n<mat-divider></mat-divider>\n<br>\n<div mat-dialog-content>\n  <div class=\"row\">\n    <div class=\"col\">\n      <h3>General</h3>\n      <table class=\"table\">\n        <tr>\n          <td>Firstname</td>\n          <td>{{user.firstname}}</td>\n        </tr>\n        <tr>\n          <td>Lastname</td>\n          <td>{{user.lastname}}</td>\n        </tr>\n        <tr>\n          <td>Username</td>\n          <td>{{user.userName}}</td>\n        </tr>\n        <tr>\n          <td>E-Mail Adresse</td>\n          <td>{{user.email}}</td>\n        </tr>\n      </table>\n    </div>\n  </div> <br>\n  <form id=\"userForm\" #userForm=\"ngForm\">\n    <h3>Neues Passwort</h3>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Password</mat-label>\n      <input matInput [type]=\"hidePassword ? 'password' : 'text'\" name=\"password\" #password=\"ngModel\"\n        [(ngModel)]=\"user.password\" required />\n      <mat-error *ngIf=\"(password.dirty || password.touched) && password.errors && password.errors.required\">\n        Required field\n      </mat-error>\n      <button mat-icon-button type=\"button\" (click)=\"hidePassword = !hidePassword\" matSuffix>\n        <mat-icon>{{ hidePassword ? \"lock\" : \"lock_open\" }}</mat-icon>\n      </button>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Repeat password</mat-label>\n      <input matInput [type]=\"hidePassword ? 'password' : 'text'\" name=\"password\" #password=\"ngModel\"\n        [(ngModel)]=\"passwordRepeat\" required />\n      <mat-error *ngIf=\"(password.dirty || password.touched) && password.errors && password.errors.required\">\n        Required field\n      </mat-error>\n      <button mat-icon-button type=\"button\" (click)=\"hidePassword = !hidePassword\" matSuffix>\n        <mat-icon>{{ hidePassword ? \"lock\" : \"lock_open\" }}</mat-icon>\n      </button>\n    </mat-form-field>\n\n  </form>\n</div>\n\n<div mat-dialog-actions class=\"pt-3\" align=\"end\">\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button type=\"submit\" color=\"primary\" (click)=\"submit()\" [disabled]=\"!userForm.form.valid\">\n    Save\n  </button>\n</div>\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n  constructor() {}\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\n\nimport { Observable, of, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { Router } from '@angular/router';\n// TODO: Add authService\n// import { AuthService } from 'api/services';\nimport { LoginService } from '../_services/login.service';\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  // TODO: Add authService\n  constructor(\n    private router: Router,\n    private loginService: LoginService // private authService: AuthService\n  ) {}\n\n  refreshTokenInProgress = false;\n\n  tokenRefreshedSource = new Subject();\n  tokenRefreshed$ = this.tokenRefreshedSource.asObservable();\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    var obs = new Subject<HttpEvent<any>>();\n\n    request = this.addAuthHeader(request);\n\n    next.handle(request).subscribe(\n      (evt) => {\n        obs.next(evt);\n      },\n      (error) => {\n        if (error.status == 401) {\n          if (error.url.indexOf('Auth') >= 0 && request.method == 'PUT') {\n            this.onUnauthorized();\n            obs.error(error);\n\n            return;\n          }\n\n          this.refreshToken().subscribe(\n            () => {\n              request = this.addAuthHeader(request);\n\n              next.handle(request).subscribe(\n                (re) => obs.next(re),\n                (err) => {\n                  this.onUnauthorized();\n                  obs.error(err);\n                }\n              );\n            },\n            (e: any) => {\n              obs.error(e);\n            }\n          );\n        } else if (error.status == 403) {\n          this.onForbidden();\n          obs.error(error);\n        } else {\n          obs.error(error);\n        }\n      }\n    );\n\n    return obs.asObservable();\n  }\n\n  private addAuthHeader(request: HttpRequest<any>) {\n    const authHeader = this.loginService.getToken();\n    if (authHeader && request.url.indexOf('Auth') < 0) {\n      return request.clone({\n        setHeaders: {\n          Authorization: 'Bearer ' + authHeader\n        }\n      });\n    }\n    return request;\n  }\n\n  private tokenExists() {\n    const token = this.loginService.getToken();\n    return token !== null && token !== undefined && token !== '';\n  }\n\n  private addCacheHeaders(request: HttpRequest<any>) {\n    return request.clone({\n      setHeaders: {\n        'Cache-Control': 'no-cache',\n        Pragma: 'no-cache',\n        Expires: 'Sat, 01 Jan 2000 00:00:00 GMT',\n        'If-Modified-Since': '0'\n      }\n    });\n  }\n\n  private refreshToken(): Observable<null> | any {\n    if (this.refreshTokenInProgress) {\n      return new Observable((observer) => {\n        this.tokenRefreshed$.subscribe(() => {\n          observer.next();\n          observer.complete();\n        });\n      });\n    } else {\n      this.refreshTokenInProgress = true;\n      // TODO: Add auth service\n      // return this.authService.putApiAuth({ token: this.loginService.getToken() || '' }).pipe(\n      //   tap((evt) => {\n      //     this.refreshTokenInProgress = false;\n      //     this.tokenRefreshedSource.next();\n      //   })\n      // );\n    }\n  }\n\n  private onUnauthorized() {\n    localStorage.clear();\n    this.router.navigateByUrl('/login');\n  }\n\n  private onForbidden() {\n    alert(\"Please stop hacking your way into places where you shouldn't be ok? Thanks\");\n    this.onUnauthorized();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { EditorHelperService } from 'src/app/_helpers/editor-helper.service';\nimport { SnackbarHelperService } from 'src/app/_helpers/snackbar-helper.service';\nimport { Examples } from 'src/app/_models/examples';\n\n@Component({\n  selector: 'app-buyer-edit',\n  templateUrl: './buyer-edit.component.html',\n  styleUrls: ['./buyer-edit.component.scss']\n})\nexport class BuyerEditComponent implements OnInit {\n\n  public isEdit = false;\n  private id?: number;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public example: Examples = {};\n\n  // EXAMPLE FOR SELECT\n  // TODO: Delete if not needed or add service to get select options\n  public selectExample = [\n    { value: 'test', name: 'Test' },\n    { value: 'test2', name: 'Test 2' }\n  ];\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private snackbarHelper: SnackbarHelperService,\n    public editorHelper: EditorHelperService\n  ) {\n    // GET THE ID FROM ROUTE\n    // IF NO ID IS SET NEW ENTRY\n    // IF ID IS SET GET DATA FROM SERVICE AND EDIT\n    route.params.subscribe((params) => {\n      this.id = +params.id;\n      if (this.id) {\n        // TODO: Add service to get entry by id\n        // this.exampleService.getExampleId(this.id).subscribe((example: Examples) => {\n        //   this.example = example;\n        // });\n        /************ DEMO CONTENT START ************/\n        // TODO: Delete demo content\n        this.example = {\n          id: 1,\n          column1: 'Test',\n          column2: 'test',\n          column3: 'Test',\n          column4: new Date(),\n          column5: new Date()\n        };\n        /************ DEMO CONTENT END ************/\n        this.isEdit = true;\n      }\n    });\n  }\n\n  ngOnInit(): void {}\n\n  // SUBMIT FUNCTION FOR FORM\n  public submit(): void {\n    this.saveData().subscribe(\n      () => {\n        this.snackbarHelper.openSnackbar('Saved successfully');\n        // TODO: Change routerLink\n        this.router.navigate(['/example'], { relativeTo: this.route });\n      },\n      (e: any) => {\n        this.snackbarHelper.openSnackbar('Error saving entry', 'bg-danger');\n      }\n    );\n  }\n\n  // CALL SERVICES FOR PUT OR POST\n  private saveData(): Observable<any> {\n    // TODO: Add service for PUT and POST\n    // if (this.isEdit) {\n    //   return this.exampleService.putExamples(this.example);\n    // } else {\n    //   return this.exampleService.postExample(this.example);\n    // }\n    // TODO: Remove this line\n    return new Observable();\n  }\n}\n\n","<div class=\"row\">\n    <div class=\"col\">\n      <mat-card class=\"shadow-lg\">\n        <div class=\"row\">\n          <div class=\"col\">\n            <!-- TODO: Change headline-->\n            <h2 *ngIf=\"!isEdit\">Add Buyer</h2>\n            <h2 *ngIf=\"isEdit\">Edit Buyer</h2>\n          </div>\n          <div class=\"col text-right btnGroup\">\n            <!-- TODO: Change routerLink -->\n            <button mat-raised-button routerLink=\"/example\">Cancel</button>\n            <!-- TODO: Change formName -->\n            <button mat-raised-button color=\"primary\" type=\"submit\" form=\"exampleForm\" [disabled]=\"!exampleForm.valid\"\n              (click)=\"submit()\">Save</button>\n          </div>\n        </div>\n        <mat-divider></mat-divider>\n        <br>\n        <mat-card-content>\n          <!-- TODO: Change formName -->\n          <form id=\"exampleForm\" #exampleForm=\"ngForm\">\n            <!-- TODO: Change ngModel and mat-label and errors -->\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Column 1</mat-label>\n              <input matInput type=\"text\" name=\"column1\" [(ngModel)]=\"example.column1\" required #column1=\"ngModel\" />\n              <mat-error *ngIf=\"(column1.dirty || column1.touched) && column1.errors && column1.errors.required\">\n                Required field\n              </mat-error>\n            </mat-form-field>\n  \n            <mat-form-field appearance=\"outline\">\n              <mat-label>Column 2</mat-label>\n              <input matInput type=\"text\" name=\"column2\" [(ngModel)]=\"example.column2\" required #column2=\"ngModel\" />\n              <mat-error *ngIf=\"(column2.dirty || column2.touched) && column2.errors && column2.errors.required\">\n                Required field\n              </mat-error>\n            </mat-form-field>\n  \n            <mat-form-field appearance=\"outline\">\n              <mat-label>Column 3</mat-label>\n              <input matInput type=\"email\" name=\"column3\" [(ngModel)]=\"example.column3\" required #column3=\"ngModel\" />\n              <mat-error *ngIf=\"(column3.dirty || column3.touched) && column3.errors && column3.errors.required\">\n                Required field\n              </mat-error>\n              <mat-error\n                *ngIf=\"(column3.dirty || column3.touched) && column3.errors && column3.errors.invalid && column3.errors.required\">\n                Invalid mail\n              </mat-error>\n            </mat-form-field>\n  \n            <!-- EXAMPLE FOR SELECT (JUST IF YOU NEED IT) -->\n            <!-- TODO: Delete if not needed  -->\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Select Example</mat-label>\n              <mat-select matInput type=\"text\" name=\"column2\" [(ngModel)]=\"example.column2\" required #column2=\"ngModel\">\n                <mat-option *ngFor=\"let select of selectExample\" [value]=\"select.value\">{{select.name}}</mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"(column2.dirty || column2.touched) && column2.errors && column2.errors.required\">\n                Required field\n              </mat-error>\n            </mat-form-field>\n  \n            <!-- EXAMPLE FOR EDITOR (JUST IF YOU NEED IT) -->\n            <!-- TODO: Delete if not needed  -->\n            <angular-editor [(ngModel)]=\"example.column1\" name=\"editor\" [config]=\"editorHelper.editorConfig\">\n            </angular-editor>\n  \n          </form>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n  ","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-delete-dialog',\n  templateUrl: './delete-dialog.component.html',\n  styleUrls: ['./delete-dialog.component.scss']\n})\nexport class DeleteDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>Are you sure deleting this entry?</p>\n<mat-dialog-actions align=\"end\">\n  <button mat-button [mat-dialog-close]=\"false\">Cancel</button>\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial color=\"warn\">Delete</button>\n</mat-dialog-actions>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { Users } from '../../_models/users';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { SnackbarHelperService } from '../../_helpers/snackbar-helper.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DeleteDialogComponent } from '../../_dialogs/delete-dialog/delete-dialog.component';\nimport { UsersEditorComponent } from './users-editor/users-editor.component';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n})\nexport class UsersComponent implements OnInit {\n  @ViewChild(MatPaginator, { static: true }) paginator!: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort!: MatSort;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public users: Users[] = [];\n\n  // NAME THE COLUMNS YOU WANT TO LIST IN THE TABLE\n  // PLEASE CHECK ALSO THE HTML matColumnDef AND element.columnX\n  // TODO: Change column names here and in html\n  public displayedColumns = ['name', 'username', 'email', 'created', 'updated', 'action'];\n\n  public dataSource = new MatTableDataSource(this.users);\n\n  constructor(private dialog: MatDialog, private snackbarHelper: SnackbarHelperService) {}\n\n  ngOnInit(): void {\n    this.initData();\n  }\n\n  // GET DATA FROM SERVICE\n  private initData(): void {\n    // TODO: Add service to get all entries\n    // this.userService.getUsers().subscribe((users: Users[]) => {\n    //   this.dataSource = new MatTableDataSource(this.users);\n    //   this.dataSource.paginator = this.paginator;\n    //   this.dataSource.sort = this.sort;\n    //   this.users = users;\n    // });\n    /************ DEMO CONTENT START ************/\n    // TODO: Delete demo content\n    this.users = [\n      {\n        id: 1,\n        userName: 'jdoe',\n        email: 'jdoe@test.com',\n        firstname: 'John',\n        lastname: 'Doe',\n        created: new Date(),\n        updated: new Date()\n      }\n    ];\n    this.dataSource = new MatTableDataSource(this.users);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    /************ DEMO CONTENT END ************/\n  }\n\n  // CREATE ENTRY OPEN DIALOG\n  public create() {\n    const dialogRef = this.dialog.open(UsersEditorComponent, {\n      width: '500px'\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        this.initData();\n      }\n    });\n  }\n\n  // EDIT ENTRY OPEN DIALOG\n  public edit(user: Users) {\n    const dialogRef = this.dialog.open(UsersEditorComponent, {\n      data: user,\n      width: '500px'\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        this.initData();\n      }\n    });\n  }\n\n  // DELETE ENTRY\n  public delete(user: Users): void {\n    const dialogRef = this.dialog.open(DeleteDialogComponent);\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        // TODO: Add service to delete entry\n        // this.userService.deleteUser(user.id).subscribe(\n        //   () => {\n        //     this.snackbarHelper.openSnackbar('Successfully deleted!');\n        //   },\n        //   (err: any) => {\n        //     this.snackbarHelper.openSnackbar('Error deleting entry', 'bg-danger');\n        //   }\n        // );\n        this.initData();\n      }\n    });\n  }\n\n  // DEFINE FILTER FOR SEARCH\n  public applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n}\n","<div class=\"row\">\n  <div class=\"col\">\n    <mat-card class=\"shadow-lg\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <!-- TODO: Change headline -->\n          <h2>User Management</h2>\n        </div>\n        <div class=\"col text-right\">\n          <!-- TODO: Change button text -->\n          <button mat-raised-button color=\"primary\" (click)=\"create()\">New user</button>\n        </div>\n      </div>\n      <mat-divider></mat-divider>\n      <br>\n      <mat-card-content>\n        <div class=\"row  align-items-center\">\n          <div class=\"col text-right\">\n            <mat-form-field>\n              <mat-label>Search</mat-label>\n              <input matInput (keyup)=\"applyFilter($event)\" #input>\n            </mat-form-field>\n          </div>\n        </div>\n        <table mat-table [dataSource]=\"dataSource\" matSort>\n\n          <!-- TODO: Change matColumnDef and element.X -->\n          <ng-container matColumnDef=\"name\" sticky>\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.firstname }} {{element.lastname}}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"username\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Username</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.userName }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"email\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>E-Mail Address</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.email }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"created\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Created</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.created | date:'dd.MM.yyyy HH:mm:ss' }}</td>\n          </ng-container>\n\n\n          <ng-container matColumnDef=\"updated\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Updated</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.updated | date:'dd.MM.yyyy HH:mm:ss' }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"action\" stickyEnd>\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Action</th>\n            <td mat-cell *matCellDef=\"let element\">\n              <button mat-icon-button (click)=\"edit(element)\">\n                <mat-icon>mode_edit</mat-icon>\n              </button>\n              <button mat-icon-button (click)=\"delete(element)\">\n                <mat-icon>delete</mat-icon>\n              </button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n          <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell\" colspan=\"6\">No entries</td>\n          </tr>\n        </table>\n\n        <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\"></mat-paginator>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Examples } from '../../_models/examples';\nimport { DeleteDialogComponent } from '../../_dialogs/delete-dialog/delete-dialog.component';\nimport { SnackbarHelperService } from '../../_helpers/snackbar-helper.service';\n\n@Component({\n  selector: 'app-example',\n  templateUrl: './example.component.html',\n  styleUrls: ['./example.component.scss']\n})\nexport class ExampleComponent implements OnInit {\n  @ViewChild(MatPaginator, { static: true }) paginator!: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort!: MatSort;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public examples: Examples[] = [];\n\n  // NAME THE COLUMNS YOU WANT TO LIST IN THE TABLE\n  // PLEASE CHECK ALSO THE HTML matColumnDef AND element.columnX\n  // TODO: Change column names here and in html\n  public displayedColumns = ['column1', 'column2', 'column3', 'action'];\n\n  public dataSource = new MatTableDataSource(this.examples);\n\n  constructor(private dialog: MatDialog, private snackbarHelper: SnackbarHelperService) {}\n\n  ngOnInit(): void {\n    this.initData();\n  }\n\n  // GET DATA FROM SERVICE\n  private initData(): void {\n    // TODO: Add service to get all entries\n    // this.exampleService.getExamples().subscribe((examples: Examples[]) => {\n    //   this.dataSource = new MatTableDataSource(this.examples);\n    //   this.dataSource.paginator = this.paginator;\n    //   this.dataSource.sort = this.sort;\n    //   this.examples = examples;\n    // });\n    /************ DEMO CONTENT START ************/\n    // TODO: Delete demo content\n   \n    this.dataSource = new MatTableDataSource(this.examples);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    /************ DEMO CONTENT END ************/\n  }\n\n  // DELETE ENTRY\n  public delete(example: Examples): void {\n    const dialogRef = this.dialog.open(DeleteDialogComponent);\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        // TODO: Add service to delete entry\n        // this.exampleService.deleteExample(example.id).subscribe(\n        //   () => {\n        //     this.snackbarHelper.openSnackbar('Successfully deleted!');\n        //   },\n        //   (err: any) => {\n        //     this.snackbarHelper.openSnackbar('Error deleting entry', 'bg-danger');\n        //   }\n        // );\n        this.initData();\n      }\n    });\n  }\n\n  // DEFINE FILTER FOR SEARCH\n  public applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n}\n","<div class=\"row\">\n  <div class=\"col\">\n    <mat-card class=\"shadow-lg\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <!-- TODO: Change headline -->\n          <h2>Material</h2>\n        </div>\n        <div class=\"col text-right\">\n          <!-- TODO: Change button text -->\n          <button mat-raised-button color=\"primary\" routerLink=\"add\">New Material</button>\n        </div>\n      </div>\n      <mat-divider></mat-divider>\n      <br>\n      <mat-card-content>\n        <div class=\"row  align-items-center\">\n          <div class=\"col text-right\">\n            <mat-form-field>\n              <mat-label>Search</mat-label>\n              <input matInput (keyup)=\"applyFilter($event)\" #input>\n            </mat-form-field>\n          </div>\n        </div>\n        <table mat-table [dataSource]=\"dataSource\" matSort>\n\n          <!-- TODO: Change matColumnDef and element.X -->\n          <ng-container matColumnDef=\"column1\" sticky>\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.column1 }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"column2\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Description</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.column2 }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"column3\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Quantity</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.column3 }}</td>\n          </ng-container>\n\n         \n          <ng-container matColumnDef=\"action\" stickyEnd>\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Action</th>\n            <td mat-cell *matCellDef=\"let element\">\n              <button mat-icon-button [routerLink]=\"['edit', element.id]\">\n                <mat-icon>mode_edit</mat-icon>\n              </button>\n              <button mat-icon-button (click)=\"delete(element)\">\n                <mat-icon>delete</mat-icon>\n              </button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n          <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell\" colspan=\"6\">No entries</td>\n          </tr>\n        </table>\n\n        <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\"></mat-paginator>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { DeleteDialogComponent } from 'src/app/_dialogs/delete-dialog/delete-dialog.component';\nimport { SnackbarHelperService } from 'src/app/_helpers/snackbar-helper.service';\nimport { Examples } from 'src/app/_models/examples';\n\n@Component({\n  selector: 'app-buyer',\n  templateUrl: './buyer.component.html',\n  styleUrls: ['./buyer.component.scss']\n})\nexport class BuyerComponent implements OnInit {\n\n  @ViewChild(MatPaginator, { static: true }) paginator!: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort!: MatSort;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public examples: Examples[] = [];\n\n  // NAME THE COLUMNS YOU WANT TO LIST IN THE TABLE\n  // PLEASE CHECK ALSO THE HTML matColumnDef AND element.columnX\n  // TODO: Change column names here and in html\n  public displayedColumns = ['column1', 'column2', 'column3', 'column4', 'column5', 'action'];\n\n  public dataSource = new MatTableDataSource(this.examples);\n\n  constructor(private dialog: MatDialog, private snackbarHelper: SnackbarHelperService) {}\n\n  ngOnInit(): void {\n    this.initData();\n  }\n\n  // GET DATA FROM SERVICE\n  private initData(): void {\n    // TODO: Add service to get all entries\n    // this.exampleService.getExamples().subscribe((examples: Examples[]) => {\n    //   this.dataSource = new MatTableDataSource(this.examples);\n    //   this.dataSource.paginator = this.paginator;\n    //   this.dataSource.sort = this.sort;\n    //   this.examples = examples;\n    // });\n    /************ DEMO CONTENT START ************/\n    // TODO: Delete demo content\n    this.examples = [\n      { id: 1, column1: 'Test', column2: 'test', column3: 'Test', column4: new Date(), column5: new Date() }\n    ];\n    this.dataSource = new MatTableDataSource(this.examples);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    /************ DEMO CONTENT END ************/\n  }\n\n  // DELETE ENTRY\n  public delete(example: Examples): void {\n    const dialogRef = this.dialog.open(DeleteDialogComponent);\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        // TODO: Add service to delete entry\n        // this.exampleService.deleteExample(example.id).subscribe(\n        //   () => {\n        //     this.snackbarHelper.openSnackbar('Successfully deleted!');\n        //   },\n        //   (err: any) => {\n        //     this.snackbarHelper.openSnackbar('Error deleting entry', 'bg-danger');\n        //   }\n        // );\n        this.initData();\n      }\n    });\n  }\n\n  // DEFINE FILTER FOR SEARCH\n  public applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n}\n","<div class=\"row\">\n    <div class=\"col\">\n      <mat-card class=\"shadow-lg\">\n        <div class=\"row\">\n          <div class=\"col\">\n            <!-- TODO: Change headline -->\n            <h2>Buyer</h2>\n          </div>\n          <div class=\"col text-right\">\n            <!-- TODO: Change button text -->\n            <button mat-raised-button color=\"primary\" routerLink=\"add\">New Buyer</button>\n          </div>\n        </div>\n        <mat-divider></mat-divider>\n        <br>\n        <mat-card-content>\n          <div class=\"row  align-items-center\">\n            <div class=\"col text-right\">\n              <mat-form-field>\n                <mat-label>Search</mat-label>\n                <input matInput (keyup)=\"applyFilter($event)\" #input>\n              </mat-form-field>\n            </div>\n          </div>\n          <table mat-table [dataSource]=\"dataSource\" matSort>\n  \n            <!-- TODO: Change matColumnDef and element.X -->\n            <ng-container matColumnDef=\"column1\" sticky>\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 1</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column1 }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"column2\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 2</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column2 }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"column3\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 3</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column3 }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"column4\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 4</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column4 | date:'dd.MM.yyyy HH:mm:ss' }}</td>\n            </ng-container>\n  \n  \n            <ng-container matColumnDef=\"column5\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 5</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column5 | date:'dd.MM.yyyy HH:mm:ss' }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"action\" stickyEnd>\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Action</th>\n              <td mat-cell *matCellDef=\"let element\">\n                <button mat-icon-button [routerLink]=\"['edit', element.id]\">\n                  <mat-icon>mode_edit</mat-icon>\n                </button>\n                <button mat-icon-button (click)=\"delete(element)\">\n                  <mat-icon>delete</mat-icon>\n                </button>\n              </td>\n            </ng-container>\n  \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  \n            <tr class=\"mat-row\" *matNoDataRow>\n              <td class=\"mat-cell\" colspan=\"6\">No entries</td>\n            </tr>\n          </table>\n  \n          <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\"></mat-paginator>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n  ","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackbarHelperService {\n  constructor(private snackBar: MatSnackBar) {}\n\n  public openSnackbar(text: string, color = 'bg-success'): void {\n    this.snackBar.open(text, '', {\n      duration: 4000,\n      panelClass: [color],\n      horizontalPosition: 'end',\n      verticalPosition: 'bottom'\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { EditorHelperService } from 'src/app/_helpers/editor-helper.service';\nimport { SnackbarHelperService } from 'src/app/_helpers/snackbar-helper.service';\nimport { Examples } from 'src/app/_models/examples';\n\n@Component({\n  selector: 'app-building-edit',\n  templateUrl: './building-edit.component.html',\n  styleUrls: ['./building-edit.component.scss']\n})\nexport class BuildingEditComponent implements OnInit {\n\n  public isEdit = false;\n  private id?: number;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public example: Examples = {};\n\n  // EXAMPLE FOR SELECT\n  // TODO: Delete if not needed or add service to get select options\n  public selectExample = [\n    { value: 'test', name: 'Test' },\n    { value: 'test2', name: 'Test 2' }\n  ];\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private snackbarHelper: SnackbarHelperService,\n    public editorHelper: EditorHelperService\n  ) {\n    // GET THE ID FROM ROUTE\n    // IF NO ID IS SET NEW ENTRY\n    // IF ID IS SET GET DATA FROM SERVICE AND EDIT\n    route.params.subscribe((params) => {\n      this.id = +params.id;\n      if (this.id) {\n        // TODO: Add service to get entry by id\n        // this.exampleService.getExampleId(this.id).subscribe((example: Examples) => {\n        //   this.example = example;\n        // });\n        /************ DEMO CONTENT START ************/\n        // TODO: Delete demo content\n        this.example = {\n          id: 1,\n          column1: 'Test',\n          column2: 'test',\n          column3: 'Test',\n          column4: new Date(),\n          column5: new Date()\n        };\n        /************ DEMO CONTENT END ************/\n        this.isEdit = true;\n      }\n    });\n  }\n\n  ngOnInit(): void {}\n\n  // SUBMIT FUNCTION FOR FORM\n  public submit(): void {\n    this.saveData().subscribe(\n      () => {\n        this.snackbarHelper.openSnackbar('Saved successfully');\n        // TODO: Change routerLink\n        this.router.navigate(['/example'], { relativeTo: this.route });\n      },\n      (e: any) => {\n        this.snackbarHelper.openSnackbar('Error saving entry', 'bg-danger');\n      }\n    );\n  }\n\n  // CALL SERVICES FOR PUT OR POST\n  private saveData(): Observable<any> {\n    // TODO: Add service for PUT and POST\n    // if (this.isEdit) {\n    //   return this.exampleService.putExamples(this.example);\n    // } else {\n    //   return this.exampleService.postExample(this.example);\n    // }\n    // TODO: Remove this line\n    return new Observable();\n  }\n}\n","<div class=\"row\">\n    <div class=\"col\">\n      <mat-card class=\"shadow-lg\">\n        <div class=\"row\">\n          <div class=\"col\">\n            <!-- TODO: Change headline-->\n            <h2 *ngIf=\"!isEdit\">Add Building</h2>\n            <h2 *ngIf=\"isEdit\">Edit Building</h2>\n          </div>\n          <div class=\"col text-right btnGroup\">\n            <!-- TODO: Change routerLink -->\n            <button mat-raised-button routerLink=\"/example\">Cancel</button>\n            <!-- TODO: Change formName -->\n            <button mat-raised-button color=\"primary\" type=\"submit\" form=\"exampleForm\" [disabled]=\"!exampleForm.valid\"\n              (click)=\"submit()\">Save</button>\n          </div>\n        </div>\n        <mat-divider></mat-divider>\n        <br>\n        <mat-card-content>\n          <!-- TODO: Change formName -->\n          <form id=\"exampleForm\" #exampleForm=\"ngForm\">\n            <!-- TODO: Change ngModel and mat-label and errors -->\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Column 1</mat-label>\n              <input matInput type=\"text\" name=\"column1\" [(ngModel)]=\"example.column1\" required #column1=\"ngModel\" />\n              <mat-error *ngIf=\"(column1.dirty || column1.touched) && column1.errors && column1.errors.required\">\n                Required field\n              </mat-error>\n            </mat-form-field>\n  \n            <mat-form-field appearance=\"outline\">\n              <mat-label>Column 2</mat-label>\n              <input matInput type=\"text\" name=\"column2\" [(ngModel)]=\"example.column2\" required #column2=\"ngModel\" />\n              <mat-error *ngIf=\"(column2.dirty || column2.touched) && column2.errors && column2.errors.required\">\n                Required field\n              </mat-error>\n            </mat-form-field>\n  \n            <mat-form-field appearance=\"outline\">\n              <mat-label>Column 3</mat-label>\n              <input matInput type=\"email\" name=\"column3\" [(ngModel)]=\"example.column3\" required #column3=\"ngModel\" />\n              <mat-error *ngIf=\"(column3.dirty || column3.touched) && column3.errors && column3.errors.required\">\n                Required field\n              </mat-error>\n              <mat-error\n                *ngIf=\"(column3.dirty || column3.touched) && column3.errors && column3.errors.invalid && column3.errors.required\">\n                Invalid mail\n              </mat-error>\n            </mat-form-field>\n  \n            <!-- EXAMPLE FOR SELECT (JUST IF YOU NEED IT) -->\n            <!-- TODO: Delete if not needed  -->\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Select Example</mat-label>\n              <mat-select matInput type=\"text\" name=\"column2\" [(ngModel)]=\"example.column2\" required #column2=\"ngModel\">\n                <mat-option *ngFor=\"let select of selectExample\" [value]=\"select.value\">{{select.name}}</mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"(column2.dirty || column2.touched) && column2.errors && column2.errors.required\">\n                Required field\n              </mat-error>\n            </mat-form-field>\n  \n            <!-- EXAMPLE FOR EDITOR (JUST IF YOU NEED IT) -->\n            <!-- TODO: Delete if not needed  -->\n            <angular-editor [(ngModel)]=\"example.column1\" name=\"editor\" [config]=\"editorHelper.editorConfig\">\n            </angular-editor>\n  \n          </form>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n  ","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'DefaultAngular';\n}\n","<router-outlet></router-outlet>\n","import { Component, OnInit } from '@angular/core';\nimport { Examples } from '../../../_models/examples';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { EditorHelperService } from '../../../_helpers/editor-helper.service';\nimport { SnackbarHelperService } from '../../../_helpers/snackbar-helper.service';\n\n@Component({\n  selector: 'app-example-editor',\n  templateUrl: './example-editor.component.html',\n  styleUrls: ['./example-editor.component.scss']\n})\nexport class ExampleEditorComponent implements OnInit {\n  public isEdit = false;\n  private id?: number;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public example: Examples = {};\n\n  // EXAMPLE FOR SELECT\n  // TODO: Delete if not needed or add service to get select options\n  public selectExample = [\n    { value: 'test', name: 'Test' },\n    { value: 'test2', name: 'Test 2' }\n  ];\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private snackbarHelper: SnackbarHelperService,\n    public editorHelper: EditorHelperService\n  ) {\n    // GET THE ID FROM ROUTE\n    // IF NO ID IS SET NEW ENTRY\n    // IF ID IS SET GET DATA FROM SERVICE AND EDIT\n    route.params.subscribe((params) => {\n      this.id = +params.id;\n      if (this.id) {\n        // TODO: Add service to get entry by id\n        // this.exampleService.getExampleId(this.id).subscribe((example: Examples) => {\n        //   this.example = example;\n        // });\n        /************ DEMO CONTENT START ************/\n        // TODO: Delete demo content\n        this.example = {\n          id: 1,\n          column1: 'Test',\n          column2: 'test',\n          column3: 'Test',\n          column4: new Date(),\n          column5: new Date()\n        };\n        /************ DEMO CONTENT END ************/\n        this.isEdit = true;\n      }\n    });\n  }\n\n  ngOnInit(): void {}\n\n  // SUBMIT FUNCTION FOR FORM\n  public submit(): void {\n    this.saveData().subscribe(\n      () => {\n        this.snackbarHelper.openSnackbar('Saved successfully');\n        // TODO: Change routerLink\n        this.router.navigate(['/example'], { relativeTo: this.route });\n      },\n      (e: any) => {\n        this.snackbarHelper.openSnackbar('Error saving entry', 'bg-danger');\n      }\n    );\n  }\n\n  // CALL SERVICES FOR PUT OR POST\n  private saveData(): Observable<any> {\n    // TODO: Add service for PUT and POST\n    // if (this.isEdit) {\n    //   return this.exampleService.putExamples(this.example);\n    // } else {\n    //   return this.exampleService.postExample(this.example);\n    // }\n    // TODO: Remove this line\n    return new Observable();\n  }\n}\n","<div class=\"row\">\n  <div class=\"col\">\n    <mat-card class=\"shadow-lg\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <!-- TODO: Change headline-->\n          <h2 *ngIf=\"!isEdit\">Add Material</h2>\n          <h2 *ngIf=\"isEdit\">Edit Material</h2>\n        </div>\n        <div class=\"col text-right btnGroup\">\n          <!-- TODO: Change routerLink -->\n          <button mat-raised-button routerLink=\"/example\">Cancel</button>\n          <!-- TODO: Change formName -->\n          <button mat-raised-button color=\"primary\" type=\"submit\" form=\"exampleForm\" [disabled]=\"!exampleForm.valid\"\n            (click)=\"submit()\">Save</button>\n        </div>\n      </div>\n      <mat-divider></mat-divider>\n      <br>\n      <mat-card-content>\n        <!-- TODO: Change formName -->\n        <form id=\"exampleForm\" #exampleForm=\"ngForm\">\n          <!-- TODO: Change ngModel and mat-label and errors -->\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Column 1</mat-label>\n            <input matInput type=\"text\" name=\"column1\" [(ngModel)]=\"example.column1\" required #column1=\"ngModel\" />\n            <mat-error *ngIf=\"(column1.dirty || column1.touched) && column1.errors && column1.errors.required\">\n              Required field\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Column 2</mat-label>\n            <input matInput type=\"text\" name=\"column2\" [(ngModel)]=\"example.column2\" required #column2=\"ngModel\" />\n            <mat-error *ngIf=\"(column2.dirty || column2.touched) && column2.errors && column2.errors.required\">\n              Required field\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Column 3</mat-label>\n            <input matInput type=\"email\" name=\"column3\" [(ngModel)]=\"example.column3\" required #column3=\"ngModel\" />\n            <mat-error *ngIf=\"(column3.dirty || column3.touched) && column3.errors && column3.errors.required\">\n              Required field\n            </mat-error>\n            <mat-error\n              *ngIf=\"(column3.dirty || column3.touched) && column3.errors && column3.errors.invalid && column3.errors.required\">\n              Invalid mail\n            </mat-error>\n          </mat-form-field>\n\n          <!-- EXAMPLE FOR SELECT (JUST IF YOU NEED IT) -->\n          <!-- TODO: Delete if not needed  -->\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Select Example</mat-label>\n            <mat-select matInput type=\"text\" name=\"column2\" [(ngModel)]=\"example.column2\" required #column2=\"ngModel\">\n              <mat-option *ngFor=\"let select of selectExample\" [value]=\"select.value\">{{select.name}}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"(column2.dirty || column2.touched) && column2.errors && column2.errors.required\">\n              Required field\n            </mat-error>\n          </mat-form-field>\n\n          <!-- EXAMPLE FOR EDITOR (JUST IF YOU NEED IT) -->\n          <!-- TODO: Delete if not needed  -->\n          <angular-editor [(ngModel)]=\"example.column1\" name=\"editor\" [config]=\"editorHelper.editorConfig\">\n          </angular-editor>\n\n        </form>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { AngularEditorConfig } from '@kolkov/angular-editor';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EditorHelperService {\n  // TODO: Change editor config if needed\n  public editorConfig: AngularEditorConfig = {\n    editable: true,\n    spellcheck: true,\n    height: 'auto',\n    minHeight: '200px',\n    maxHeight: 'auto',\n    width: 'auto',\n    minWidth: '0',\n    translate: 'yes',\n    enableToolbar: true,\n    showToolbar: true,\n    placeholder: 'Enter text here...',\n    defaultParagraphSeparator: '',\n    defaultFontName: '',\n    defaultFontSize: '',\n    fonts: [\n      { class: 'arial', name: 'Arial' },\n      { class: 'times-new-roman', name: 'Times New Roman' },\n      { class: 'calibri', name: 'Calibri' },\n      { class: 'comic-sans-ms', name: 'Comic Sans MS' }\n    ],\n    customClasses: [\n      {\n        name: 'quote',\n        class: 'quote'\n      },\n      {\n        name: 'redText',\n        class: 'redText'\n      },\n      {\n        name: 'titleText',\n        class: 'titleText',\n        tag: 'h1'\n      }\n    ],\n    uploadWithCredentials: false,\n    sanitize: true,\n    toolbarPosition: 'top',\n    toolbarHiddenButtons: [['bold', 'italic'], ['fontSize']]\n  };\n\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\n\n// MODULES\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { MaterialModule } from './material.module';\nimport { AngularEditorModule } from '@kolkov/angular-editor';\n\n// INTERCEPTOR\nimport { TokenInterceptor } from './interceptor/auth.interceptor';\n\n// COMPONENTS\nimport { AppComponent } from './app.component';\nimport { MainComponent } from './main/main.component';\nimport { DashboardComponent } from './main/dashboard/dashboard.component';\nimport { ExampleComponent } from './main/example/example.component';\nimport { ExampleEditorComponent } from './main/example/example-editor/example-editor.component';\nimport { UsersComponent } from './main/users/users.component';\nimport { UsersEditorComponent } from './main/users/users-editor/users-editor.component';\nimport { LoginComponent } from './login/login.component';\nimport { DeleteDialogComponent } from './_dialogs/delete-dialog/delete-dialog.component';\nimport { ProfileDialogComponent } from './_dialogs/profile-dialog/profile-dialog.component';\nimport { BuyerComponent } from './main/buyer/buyer.component';\nimport { BuildingComponent } from './main/building/building.component';\nimport { BuyerEditComponent } from './main/buyer/buyer-edit/buyer-edit.component';\nimport { BuildingEditComponent } from './main/building/building-edit/building-edit.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainComponent,\n    DashboardComponent,\n    ExampleComponent,\n    ExampleEditorComponent,\n    UsersComponent,\n    UsersEditorComponent,\n    LoginComponent,\n    DeleteDialogComponent,\n    ProfileDialogComponent,\n    BuyerComponent,\n    BuildingComponent,\n    BuyerEditComponent,\n    BuildingEditComponent,\n \n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n    MaterialModule,\n    AngularEditorModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptor,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { DeleteDialogComponent } from 'src/app/_dialogs/delete-dialog/delete-dialog.component';\nimport { SnackbarHelperService } from 'src/app/_helpers/snackbar-helper.service';\nimport { Examples } from 'src/app/_models/examples';\n\n@Component({\n  selector: 'app-building',\n  templateUrl: './building.component.html',\n  styleUrls: ['./building.component.scss']\n})\nexport class BuildingComponent implements OnInit {\n\n  @ViewChild(MatPaginator, { static: true }) paginator!: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort!: MatSort;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public examples: Examples[] = [];\n\n  // NAME THE COLUMNS YOU WANT TO LIST IN THE TABLE\n  // PLEASE CHECK ALSO THE HTML matColumnDef AND element.columnX\n  // TODO: Change column names here and in html\n  public displayedColumns = ['column1', 'column2', 'column3', 'column4', 'column5', 'action'];\n\n  public dataSource = new MatTableDataSource(this.examples);\n\n  constructor(private dialog: MatDialog, private snackbarHelper: SnackbarHelperService) {}\n\n  ngOnInit(): void {\n    this.initData();\n  }\n\n  // GET DATA FROM SERVICE\n  private initData(): void {\n    // TODO: Add service to get all entries\n    // this.exampleService.getExamples().subscribe((examples: Examples[]) => {\n    //   this.dataSource = new MatTableDataSource(this.examples);\n    //   this.dataSource.paginator = this.paginator;\n    //   this.dataSource.sort = this.sort;\n    //   this.examples = examples;\n    // });\n    /************ DEMO CONTENT START ************/\n    // TODO: Delete demo content\n    this.examples = [\n      { id: 1, column1: 'Test', column2: 'test', column3: 'Test', column4: new Date(), column5: new Date() }\n    ];\n    this.dataSource = new MatTableDataSource(this.examples);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    /************ DEMO CONTENT END ************/\n  }\n\n  // DELETE ENTRY\n  public delete(example: Examples): void {\n    const dialogRef = this.dialog.open(DeleteDialogComponent);\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        // TODO: Add service to delete entry\n        // this.exampleService.deleteExample(example.id).subscribe(\n        //   () => {\n        //     this.snackbarHelper.openSnackbar('Successfully deleted!');\n        //   },\n        //   (err: any) => {\n        //     this.snackbarHelper.openSnackbar('Error deleting entry', 'bg-danger');\n        //   }\n        // );\n        this.initData();\n      }\n    });\n  }\n\n  // DEFINE FILTER FOR SEARCH\n  public applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n}\n","<div class=\"row\">\n    <div class=\"col\">\n      <mat-card class=\"shadow-lg\">\n        <div class=\"row\">\n          <div class=\"col\">\n            <!-- TODO: Change headline -->\n            <h2>Building</h2>\n          </div>\n          <div class=\"col text-right\">\n            <!-- TODO: Change button text -->\n            <button mat-raised-button color=\"primary\" routerLink=\"add\">New Building</button>\n          </div>\n        </div>\n        <mat-divider></mat-divider>\n        <br>\n        <mat-card-content>\n          <div class=\"row  align-items-center\">\n            <div class=\"col text-right\">\n              <mat-form-field>\n                <mat-label>Search</mat-label>\n                <input matInput (keyup)=\"applyFilter($event)\" #input>\n              </mat-form-field>\n            </div>\n          </div>\n          <table mat-table [dataSource]=\"dataSource\" matSort>\n  \n            <!-- TODO: Change matColumnDef and element.X -->\n            <ng-container matColumnDef=\"column1\" sticky>\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 1</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column1 }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"column2\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 2</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column2 }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"column3\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 3</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column3 }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"column4\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 4</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column4 | date:'dd.MM.yyyy HH:mm:ss' }}</td>\n            </ng-container>\n  \n  \n            <ng-container matColumnDef=\"column5\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 5</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column5 | date:'dd.MM.yyyy HH:mm:ss' }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"action\" stickyEnd>\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Action</th>\n              <td mat-cell *matCellDef=\"let element\">\n                <button mat-icon-button [routerLink]=\"['edit', element.id]\">\n                  <mat-icon>mode_edit</mat-icon>\n                </button>\n                <button mat-icon-button (click)=\"delete(element)\">\n                  <mat-icon>delete</mat-icon>\n                </button>\n              </td>\n            </ng-container>\n  \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  \n            <tr class=\"mat-row\" *matNoDataRow>\n              <td class=\"mat-cell\" colspan=\"6\">No entries</td>\n            </tr>\n          </table>\n  \n          <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\"></mat-paginator>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n  ","import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { NavItem } from '../_models/nav';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MenuService {\n  // TODO: Change menu items\n\n  public main: NavItem[] = [];\n\n  public components: NavItem[] = [\n    {\n      displayName: 'Dashboard',\n      iconName: 'dashboard',\n      route: '/dashboard'\n    },\n    {\n      displayName: 'Material',\n      iconName: 'list_alt',\n      route: '/material'\n    },\n    {\n      displayName: 'Buyer',\n      iconName: 'list_alt',\n      route: '/buyer'\n    },\n    {\n      displayName: 'Building',\n      iconName: 'list_alt',\n      route: '/building'\n    }\n  ];\n\n  public settings: NavItem[] = [\n    {\n      displayName: 'User Management',\n      iconName: 'people',\n      route: '/users'\n    }\n  ];\n\n  public currentUrl = new BehaviorSubject<string>('');\n\n  constructor(private router: Router) {\n    this.router.events.subscribe((event) => {\n      this.findMenuItem(event);\n      setTimeout(() => {\n        this.findMenuItem(event);\n      }, 1000);\n      if (event instanceof NavigationEnd) {\n        this.currentUrl.next(event.urlAfterRedirects);\n      }\n    });\n  }\n\n  private findMenuItem(event: any) {\n    let menuItem = [];\n    const temp1 = this.main.filter((i) => i.route === event.url);\n    const temp2 = this.components.filter((i) => i.route === event.url);\n    const temp3 = this.settings.filter((i) => i.route === event.url);\n    if (temp1.length > 0) {\n      menuItem = temp1;\n    } else if (temp2.length > 0) {\n      menuItem = temp2;\n    } else if (temp3.length > 0) {\n      menuItem = temp3;\n    } else {\n      return;\n    }\n    if (menuItem[0].disabled) {\n      this.router.navigate(['/']);\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"row\">\n  <div class=\"col\">\n    <mat-card class=\"shadow-lg\">\n      <h2>Dashboard</h2>\n      <mat-divider></mat-divider>\n      <br>\n    </mat-card>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MainComponent } from './main/main.component';\nimport { DashboardComponent } from './main/dashboard/dashboard.component';\nimport { ExampleComponent } from './main/example/example.component';\nimport { ExampleEditorComponent } from './main/example/example-editor/example-editor.component';\nimport { UsersComponent } from './main/users/users.component';\nimport { LoginComponent } from './login/login.component';\nimport { BuyerComponent } from './main/buyer/buyer.component';\nimport { BuildingComponent } from './main/building/building.component';\nimport { BuyerEditComponent } from './main/buyer/buyer-edit/buyer-edit.component';\nimport { BuildingEditComponent } from './main/building/building-edit/building-edit.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MainComponent,\n    children: [\n      {\n        path: 'dashboard',\n        component: DashboardComponent\n      },\n      {\n        path: 'material',\n        component: ExampleComponent\n      },\n      {\n        path: 'material/edit/:id',\n        component: ExampleEditorComponent\n      },\n      {\n        path: 'material/add',\n        component: ExampleEditorComponent\n      },\n      {\n        path: 'buyer',\n        component: BuyerComponent\n      }, \n      {\n        path: 'buyer/edit/:id',\n        component: BuyerEditComponent\n      },\n      {\n        path: 'buyer/add',\n        component: BuyerEditComponent\n      },\n      {\n        path: 'building',\n        component: BuildingComponent\n      },\n      {\n        path: 'building/edit/:id',\n        component: BuildingEditComponent\n      },\n      {\n        path: 'building/add',\n        component: BuildingEditComponent\n      },\n      {\n        path: 'users',\n        component: UsersComponent\n      }\n    ]\n  },\n  {\n    path: 'login',\n    component: LoginComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Login } from '../_models/login';\nimport { Router } from '@angular/router';\nimport { SnackbarHelperService } from '../_helpers/snackbar-helper.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public loginUser: Login = {};\n\n  constructor(private router: Router, private snackbarHelper: SnackbarHelperService) {}\n\n  ngOnInit(): void {}\n\n  // SUBMIT FUNCTION FOR FORM\n  public login(): void {\n    this.doLogin().subscribe(\n      (resp: any) => {\n        // TODO: Store data you need\n        localStorage.setItem('token', resp.authToken);\n        localStorage.setItem('user', resp.user);\n        this.router.navigateByUrl('/');\n      },\n      (e: any) => {\n        this.snackbarHelper.openSnackbar('Error logging in', 'bg-danger');\n      }\n    );\n  }\n\n  // CALL SERVICES FOR PUT OR POST\n  private doLogin(): Observable<any> {\n    // TODO: Add service for login\n    // return this.authService.postApiAuth(this.loginUser);\n    // TODO: Remove this line\n    return new Observable();\n  }\n}\n","<div class=\"container-fluid d-flex h-100\">\n  <div class=\"login col-xl-3 col-sm-4 m-auto\">\n    <div class=\"logo pb-4\">\n      <img class=\"img-fluid\" src=\"../../assets/logos/logo.png\" />\n    </div>\n\n    <mat-card>\n      <mat-card-header class=\"justify-content-center\">\n        <mat-card-title>Login</mat-card-title>\n      </mat-card-header>\n      <div class=\"px-3\">\n        <form #loginForm=\"ngForm\" (ngSubmit)=\"login()\">\n          <mat-card-content>\n            <mat-form-field class=\"d-block\" appearance=\"outline\">\n              <mat-label>Username</mat-label>\n              <input matInput type=\"text\" required [(ngModel)]=\"loginUser.username\" name=\"username\"\n                #username=\"ngModel\" />\n              <mat-icon matSuffix>person</mat-icon>\n              <mat-error [hidden]=\"username.valid || username.pristine\"><strong>required</strong></mat-error>\n            </mat-form-field>\n\n            <mat-form-field class=\"d-block pt-3\" appearance=\"outline\">\n              <mat-label>Password</mat-label>\n              <input matInput type=\"password\" required [(ngModel)]=\"loginUser.password\" name=\"password\"\n                #password=\"ngModel\" />\n              <mat-icon matSuffix>lock</mat-icon>\n              <mat-error [hidden]=\"password.valid || password.pristine\"><strong>required</strong></mat-error>\n            </mat-form-field>\n          </mat-card-content>\n          <mat-card-actions align=\"end\">\n            <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!loginForm.form.valid\">\n              Login\n            </button>\n          </mat-card-actions>\n        </form>\n      </div>\n    </mat-card>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n// Material Navigation\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n// Material Layout\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatListModule } from '@angular/material/list';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatTreeModule } from '@angular/material/tree';\n// Material Buttons & Indicators\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatRippleModule } from '@angular/material/core';\n// Material Popups & Modals\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n// Material Data tables\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    MatAutocompleteModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatListModule,\n    MatStepperModule,\n    MatTabsModule,\n    MatTreeModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatBadgeModule,\n    MatChipsModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatRippleModule,\n    MatBottomSheetModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    MatTooltipModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatTableModule,\n    LayoutModule\n  ],\n  exports: [\n    MatAutocompleteModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatListModule,\n    MatStepperModule,\n    MatTabsModule,\n    MatTreeModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatBadgeModule,\n    MatChipsModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatRippleModule,\n    MatBottomSheetModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    MatTooltipModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatTableModule,\n    LayoutModule\n  ]\n})\nexport class MaterialModule {}\n","import { BreakpointObserver } from '@angular/cdk/layout';\nimport { Component, OnInit } from '@angular/core';\nimport { MenuService } from '../_services/menu.service';\nimport { NavItem } from '../_models/nav';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ProfileDialogComponent } from '../_dialogs/profile-dialog/profile-dialog.component';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n  public isSmallScreen = false;\n\n  main = this.menuService.main;\n  components = this.menuService.components;\n  settings = this.menuService.settings;\n\n  mainLength = 0;\n  componentsLength = 0;\n  settingsLength = 0;\n\n  constructor(\n    breakpointObserver: BreakpointObserver,\n    private menuService: MenuService,\n    private dialog: MatDialog,\n    private router: Router\n  ) {\n    this.isSmallScreen = breakpointObserver.isMatched('(min-width: 1000px)');\n    breakpointObserver.observe('(min-width: 1000px)').subscribe((result) => {\n      this.isSmallScreen = result.matches;\n    });\n  }\n\n  ngOnInit(): void {\n    this.main.forEach((item) => {\n      setTimeout(() => {\n        if (!item.disabled) {\n          this.mainLength++;\n        }\n      });\n      this.checkCurrentUrl(item);\n    });\n\n    this.components.forEach((item) => {\n      setTimeout(() => {\n        if (!item.disabled) {\n          this.componentsLength++;\n        }\n      });\n      this.checkCurrentUrl(item);\n    });\n\n    this.settings.forEach((item) => {\n      setTimeout(() => {\n        if (!item.disabled) {\n          this.settingsLength++;\n        }\n      });\n      this.checkCurrentUrl(item);\n    });\n  }\n\n  checkCurrentUrl(item: NavItem): void {\n    this.menuService.currentUrl.subscribe((url: string) => {\n      if (item.route && url) {\n        item.expanded = url.indexOf(`${item.route}`) === 0;\n      }\n    });\n  }\n\n  closeNav(snav: any): void {\n    if (!this.isSmallScreen) {\n      snav.close();\n    }\n  }\n\n  logout(): void {\n    // TODO: Add logout function\n    localStorage.clear();\n    this.router.navigateByUrl('/login');\n  }\n\n  editProfile(): void {\n    /************ DEMO CONTENT START ************/\n    // TODO: Delete demo content\n    const user = {\n      id: 1,\n      userName: 'jdoe',\n      email: 'jdoe@test.com',\n      firstname: 'John',\n      lastname: 'Doe',\n      created: new Date(),\n      updated: new Date()\n    };\n    /************ DEMO CONTENT END ************/\n    // TODO: Add get user (e.g. from localStorage)\n    this.dialog.open(ProfileDialogComponent, {\n      data: user,\n      width: '500px'\n    });\n  }\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #snav [opened]=\"isSmallScreen\" [mode]=\"isSmallScreen ? 'side' : 'over'\" #drawer class=\"sidenav shadow-lg\"\n    fixedInViewport attr.role=\"navigation\">\n    <mat-toolbar style=\"background-color: white;\">\n      <span class=\"toolbar-header\"><b>Construction</b>App</span>\n      <span class=\"toolbar-spacer\"></span>\n\n    </mat-toolbar>\n    <mat-divider></mat-divider>\n    <mat-nav-list>\n      <div *ngFor=\"let item of main\">\n        <div *ngIf=\"!item.disabled\">\n          <a mat-list-item [routerLink]=\"item.route\" routerLinkActive=\"active\" (click)=\"closeNav(snav)\">\n            <mat-icon mat-list-icon>{{item.iconName}}</mat-icon>\n            <div mat-line>{{item.displayName}}</div>\n            <span *ngIf=\"item.children && item.children.length\">\n              <mat-icon [@indicatorRotate]=\"item.expanded ? 'expanded': 'collapsed'\">\n                expand_more\n              </mat-icon>\n            </span>\n          </a>\n          <div *ngIf=\"item.expanded\">\n            <a mat-list-item *ngFor=\"let child of item.children\" [routerLink]=\"child.route\" class=\"subnav\"\n              (click)=\"closeNav(snav)\">\n              <mat-icon mat-list-icon>{{child.iconName}}</mat-icon>\n              <div mat-line>{{child.displayName}}</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div *ngFor=\"let item of components\">\n        <div *ngIf=\"!item.disabled\">\n          <a mat-list-item [routerLink]=\"item.route\" routerLinkActive=\"active\" (click)=\"closeNav(snav)\">\n            <mat-icon mat-list-icon>{{item.iconName}}</mat-icon>\n            <div mat-line>{{item.displayName}}</div>\n            <span *ngIf=\"item.children && item.children.length\">\n              <mat-icon [@indicatorRotate]=\"item.expanded ? 'expanded': 'collapsed'\">\n                expand_more\n              </mat-icon>\n            </span>\n          </a>\n          <div *ngIf=\"item.expanded\">\n            <a mat-list-item *ngFor=\"let child of item.children\" [routerLink]=\"child.route\" class=\"subnav\"\n              (click)=\"closeNav(snav)\">\n              <mat-icon mat-list-icon>{{child.iconName}}</mat-icon>\n              <div mat-line>{{child.displayName}}</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div *ngFor=\"let item of settings\" class=\"bottomMenu\">\n        <mat-divider></mat-divider>\n        <div *ngIf=\"!item.disabled\">\n          <a mat-list-item [routerLink]=\"item.route\" routerLinkActive=\"active\" (click)=\"closeNav(snav)\">\n            <mat-icon mat-list-icon>{{item.iconName}}</mat-icon>\n            <div mat-line>{{item.displayName}}</div>\n            <span *ngIf=\"item.children && item.children.length\">\n              <mat-icon [@indicatorRotate]=\"item.expanded ? 'expanded': 'collapsed'\">\n                expand_more\n              </mat-icon>\n            </span>\n          </a>\n          <div *ngIf=\"item.expanded\">\n            <a mat-list-item *ngFor=\"let child of item.children\" [routerLink]=\"child.route\" class=\"subnav\"\n              (click)=\"closeNav(snav)\">\n              <mat-icon mat-list-icon>{{child.iconName}}</mat-icon>\n              <div mat-line>{{child.displayName}}</div>\n            </a>\n          </div>\n        </div>\n      </div>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar class=\"shadow-lg\">\n      <button type=\"button\" aria-label=\"Toggle sidenav\" align=\"end\" mat-icon-button (click)=\"drawer.toggle()\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span class=\"toolbar-spacer\"></span>\n      <button mat-button style=\"float: right;\" (click)=\"editProfile()\">\n        <mat-icon>person</mat-icon>\n      </button>\n      <button mat-button style=\"float: right;\" (click)=\"logout()\">\n        <mat-icon>logout</mat-icon>\n      </button>\n\n    </mat-toolbar>\n\n    <div class=\"container-fluid\">\n      <router-outlet></router-outlet>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}