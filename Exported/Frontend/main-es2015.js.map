{"version":3,"sources":["./src/app/main/users/users-editor/users-editor.component.ts","./src/app/main/users/users-editor/users-editor.component.html","./src/app/_dialogs/profile-dialog/profile-dialog.component.ts","./src/app/_dialogs/profile-dialog/profile-dialog.component.html","./src/app/_services/login.service.ts","./src/app/interceptor/auth.interceptor.ts","./src/environments/environment.ts","./src/app/main/buyer/buyer-edit/buyer-edit.component.ts","./src/app/main/buyer/buyer-edit/buyer-edit.component.html","./src/app/_dialogs/delete-dialog/delete-dialog.component.ts","./src/app/_dialogs/delete-dialog/delete-dialog.component.html","./src/app/main/users/users.component.ts","./src/app/main/users/users.component.html","./src/app/main/example/example.component.ts","./src/app/main/example/example.component.html","./src/app/main/buyer/buyer.component.ts","./src/app/main/buyer/buyer.component.html","./src/app/_helpers/snackbar-helper.service.ts","./src/app/main/building/building-edit/building-edit.component.ts","./src/app/main/building/building-edit/building-edit.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/main/example/example-editor/example-editor.component.ts","./src/app/main/example/example-editor/example-editor.component.html","./src/app/_helpers/editor-helper.service.ts","./src/app/app.module.ts","./src/app/main/building/building.component.ts","./src/app/main/building/building.component.html","./src/app/_services/menu.service.ts","./src/app/main/dashboard/dashboard.component.ts","./src/app/main/dashboard/dashboard.component.html","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/material.module.ts","./src/app/main/main.component.ts","./src/app/main/main.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { Users } from '../../../_models/users';\nimport { SnackbarHelperService } from '../../../_helpers/snackbar-helper.service';\nimport { Observable } from 'rxjs';\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-users-editor',\n  templateUrl: './users-editor.component.html',\n  styleUrls: ['./users-editor.component.scss']\n})\nexport class UsersEditorComponent implements OnInit {\n  public isEdit = false;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public user: Users = {};\n\n  constructor(\n    // TODO: Add model\n    @Inject(MAT_DIALOG_DATA) public data: Users,\n    private dialog: MatDialog,\n    private snackbarHelper: SnackbarHelperService\n  ) {}\n\n  ngOnInit(): void {\n    this.isEdit = this.data !== null;\n    this.user = this.isEdit ? this.data : {};\n  }\n\n  // SUBMIT FUNCTION FOR FORM\n  public submit(): void {\n    this.saveData().subscribe(\n      () => {\n        this.snackbarHelper.openSnackbar('Saved successfully');\n        this.dialog.closeAll();\n      },\n      (e: any) => {\n        this.snackbarHelper.openSnackbar('Error saving entry', 'bg-danger');\n        this.dialog.closeAll();\n      }\n    );\n  }\n\n  // CALL SERVICES FOR PUT OR POST\n  private saveData(): Observable<any> {\n    // TODO: Add service for PUT and POST\n    // if (this.isEdit) {\n    //   return this.userService.putUser(this.user);\n    // } else {\n    //   return this.userService.postUser(this.user);\n    // }\n    // TODO: Remove this line\n    return new Observable();\n  }\n}\n","<h1 mat-dialog-title *ngIf=\"!isEdit\">Create user</h1>\n<h1 mat-dialog-title *ngIf=\"isEdit\">Edit user</h1>\n<mat-divider></mat-divider>\n<br>\n<div mat-dialog-content>\n  <!-- TODO: Change formName -->\n  <form id=\"usersForm\" #usersForm=\"ngForm\">\n    <!-- TODO: Change ngModel and mat-label and errors -->\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Username</mat-label>\n      <input matInput type=\"text\" name=\"userName\" [(ngModel)]=\"user.userName\" required #userName=\"ngModel\" />\n      <mat-error *ngIf=\"(userName.dirty || userName.touched) && userName.errors && userName.errors.required\">\n        Required field\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Firstname</mat-label>\n      <input matInput type=\"text\" name=\"firstname\" [(ngModel)]=\"user.firstname\" required #firstname=\"ngModel\" />\n      <mat-error *ngIf=\"(firstname.dirty || firstname.touched) && firstname.errors && firstname.errors.required\">\n        Required field\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Lastname</mat-label>\n      <input matInput type=\"text\" name=\"lastname\" [(ngModel)]=\"user.lastname\" required #lastname=\"ngModel\" />\n      <mat-error *ngIf=\"(lastname.dirty || lastname.touched) && lastname.errors && lastname.errors.required\">\n        Required field\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>E-Mail Address</mat-label>\n      <input matInput type=\"email\" name=\"email\" [(ngModel)]=\"user.email\" required #email=\"ngModel\" />\n      <mat-error *ngIf=\"(email.dirty || email.touched) && email.errors && email.errors.required\">\n        Required field\n      </mat-error>\n      <mat-error\n        *ngIf=\"(email.dirty || email.touched) && email.errors && email.errors.invalid && email.errors.required\">\n        Invalid mail\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Password</mat-label>\n      <input matInput type=\"password\" name=\"password\" #password=\"ngModel\" [(ngModel)]=\"user.password\"\n        [required]=\"!isEdit\" />\n      <mat-error [hidden]=\"password.valid || password.pristine || isEdit\">Required field</mat-error>\n    </mat-form-field>\n\n  </form>\n</div>\n\n<div mat-dialog-actions class=\"pt-3\" align=\"end\">\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button type=\"submit\" color=\"primary\" (click)=\"submit()\" [disabled]=\"!usersForm.form.valid\">\n    Save\n  </button>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\nimport { Users } from '../../_models/users';\nimport { SnackbarHelperService } from '../../_helpers/snackbar-helper.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-profile-dialog',\n  templateUrl: './profile-dialog.component.html',\n  styleUrls: ['./profile-dialog.component.scss']\n})\nexport class ProfileDialogComponent implements OnInit {\n  public hidePassword = true;\n  public passwordRepeat = '';\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public user: Users = {};\n\n  constructor(\n    // TODO: Add model\n    @Inject(MAT_DIALOG_DATA) public data: Users,\n    private dialog: MatDialog,\n    private snackbarHelper: SnackbarHelperService\n  ) {}\n\n  ngOnInit(): void {\n    this.user = this.data;\n  }\n\n  // SUBMIT FUNCTION FOR FORM\n  public submit(): void {\n    if (this.passwordRepeat === this.user.password) {\n      this.saveData().subscribe(\n        () => {\n          this.snackbarHelper.openSnackbar('Saved successfully');\n          this.dialog.closeAll();\n        },\n        (e: any) => {\n          this.snackbarHelper.openSnackbar('Error saving entry', 'bg-danger');\n          this.dialog.closeAll();\n        }\n      );\n    } else {\n      this.snackbarHelper.openSnackbar('Passwords are different', 'bg-danger');\n    }\n  }\n\n  // CALL SERVICES FOR PUT OR POST\n  private saveData(): Observable<any> {\n    // TODO: Add service for edit password\n    //   return this.exampleService.putUserPassword(this.user);\n    // TODO: Remove this line\n    return new Observable();\n  }\n}\n","<h1 mat-dialog-title>Profile</h1>\n<mat-divider></mat-divider>\n<br>\n<div mat-dialog-content>\n  <div class=\"row\">\n    <div class=\"col\">\n      <h3>General</h3>\n      <table class=\"table\">\n        <tr>\n          <td>Firstname</td>\n          <td>{{user.firstname}}</td>\n        </tr>\n        <tr>\n          <td>Lastname</td>\n          <td>{{user.lastname}}</td>\n        </tr>\n        <tr>\n          <td>Username</td>\n          <td>{{user.userName}}</td>\n        </tr>\n        <tr>\n          <td>E-Mail Adresse</td>\n          <td>{{user.email}}</td>\n        </tr>\n      </table>\n    </div>\n  </div> <br>\n  <form id=\"userForm\" #userForm=\"ngForm\">\n    <h3>Neues Passwort</h3>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Password</mat-label>\n      <input matInput [type]=\"hidePassword ? 'password' : 'text'\" name=\"password\" #password=\"ngModel\"\n        [(ngModel)]=\"user.password\" required />\n      <mat-error *ngIf=\"(password.dirty || password.touched) && password.errors && password.errors.required\">\n        Required field\n      </mat-error>\n      <button mat-icon-button type=\"button\" (click)=\"hidePassword = !hidePassword\" matSuffix>\n        <mat-icon>{{ hidePassword ? \"lock\" : \"lock_open\" }}</mat-icon>\n      </button>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Repeat password</mat-label>\n      <input matInput [type]=\"hidePassword ? 'password' : 'text'\" name=\"password\" #password=\"ngModel\"\n        [(ngModel)]=\"passwordRepeat\" required />\n      <mat-error *ngIf=\"(password.dirty || password.touched) && password.errors && password.errors.required\">\n        Required field\n      </mat-error>\n      <button mat-icon-button type=\"button\" (click)=\"hidePassword = !hidePassword\" matSuffix>\n        <mat-icon>{{ hidePassword ? \"lock\" : \"lock_open\" }}</mat-icon>\n      </button>\n    </mat-form-field>\n\n  </form>\n</div>\n\n<div mat-dialog-actions class=\"pt-3\" align=\"end\">\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\n  <button mat-raised-button type=\"submit\" color=\"primary\" (click)=\"submit()\" [disabled]=\"!userForm.form.valid\">\n    Save\n  </button>\n</div>\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n  constructor() {}\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\n\nimport { Observable, of, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { Router } from '@angular/router';\n// TODO: Add authService\n// import { AuthService } from 'api/services';\nimport { LoginService } from '../_services/login.service';\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  // TODO: Add authService\n  constructor(\n    private router: Router,\n    private loginService: LoginService // private authService: AuthService\n  ) {}\n\n  refreshTokenInProgress = false;\n\n  tokenRefreshedSource = new Subject();\n  tokenRefreshed$ = this.tokenRefreshedSource.asObservable();\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    var obs = new Subject<HttpEvent<any>>();\n\n    request = this.addAuthHeader(request);\n\n    next.handle(request).subscribe(\n      (evt) => {\n        obs.next(evt);\n      },\n      (error) => {\n        if (error.status == 401) {\n          if (error.url.indexOf('Auth') >= 0 && request.method == 'PUT') {\n            this.onUnauthorized();\n            obs.error(error);\n\n            return;\n          }\n\n          this.refreshToken().subscribe(\n            () => {\n              request = this.addAuthHeader(request);\n\n              next.handle(request).subscribe(\n                (re) => obs.next(re),\n                (err) => {\n                  this.onUnauthorized();\n                  obs.error(err);\n                }\n              );\n            },\n            (e: any) => {\n              obs.error(e);\n            }\n          );\n        } else if (error.status == 403) {\n          this.onForbidden();\n          obs.error(error);\n        } else {\n          obs.error(error);\n        }\n      }\n    );\n\n    return obs.asObservable();\n  }\n\n  private addAuthHeader(request: HttpRequest<any>) {\n    const authHeader = this.loginService.getToken();\n    if (authHeader && request.url.indexOf('Auth') < 0) {\n      return request.clone({\n        setHeaders: {\n          Authorization: 'Bearer ' + authHeader\n        }\n      });\n    }\n    return request;\n  }\n\n  private tokenExists() {\n    const token = this.loginService.getToken();\n    return token !== null && token !== undefined && token !== '';\n  }\n\n  private addCacheHeaders(request: HttpRequest<any>) {\n    return request.clone({\n      setHeaders: {\n        'Cache-Control': 'no-cache',\n        Pragma: 'no-cache',\n        Expires: 'Sat, 01 Jan 2000 00:00:00 GMT',\n        'If-Modified-Since': '0'\n      }\n    });\n  }\n\n  private refreshToken(): Observable<null> | any {\n    if (this.refreshTokenInProgress) {\n      return new Observable((observer) => {\n        this.tokenRefreshed$.subscribe(() => {\n          observer.next();\n          observer.complete();\n        });\n      });\n    } else {\n      this.refreshTokenInProgress = true;\n      // TODO: Add auth service\n      // return this.authService.putApiAuth({ token: this.loginService.getToken() || '' }).pipe(\n      //   tap((evt) => {\n      //     this.refreshTokenInProgress = false;\n      //     this.tokenRefreshedSource.next();\n      //   })\n      // );\n    }\n  }\n\n  private onUnauthorized() {\n    localStorage.clear();\n    this.router.navigateByUrl('/login');\n  }\n\n  private onForbidden() {\n    alert(\"Please stop hacking your way into places where you shouldn't be ok? Thanks\");\n    this.onUnauthorized();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { EditorHelperService } from 'src/app/_helpers/editor-helper.service';\nimport { SnackbarHelperService } from 'src/app/_helpers/snackbar-helper.service';\nimport { Examples } from 'src/app/_models/examples';\n\n@Component({\n  selector: 'app-buyer-edit',\n  templateUrl: './buyer-edit.component.html',\n  styleUrls: ['./buyer-edit.component.scss']\n})\nexport class BuyerEditComponent implements OnInit {\n\n  public isEdit = false;\n  private id?: number;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public example: Examples = {};\n\n  // EXAMPLE FOR SELECT\n  // TODO: Delete if not needed or add service to get select options\n  public selectExample = [\n    { value: 'test', name: 'Test' },\n    { value: 'test2', name: 'Test 2' }\n  ];\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private snackbarHelper: SnackbarHelperService,\n    public editorHelper: EditorHelperService\n  ) {\n    // GET THE ID FROM ROUTE\n    // IF NO ID IS SET NEW ENTRY\n    // IF ID IS SET GET DATA FROM SERVICE AND EDIT\n    route.params.subscribe((params) => {\n      this.id = +params.id;\n      if (this.id) {\n        // TODO: Add service to get entry by id\n        // this.exampleService.getExampleId(this.id).subscribe((example: Examples) => {\n        //   this.example = example;\n        // });\n        /************ DEMO CONTENT START ************/\n        // TODO: Delete demo content\n        this.example = {\n          id: 1,\n          column1: 'Test',\n          column2: 'test',\n          column3: 'Test',\n          column4: new Date(),\n          column5: new Date()\n        };\n        /************ DEMO CONTENT END ************/\n        this.isEdit = true;\n      }\n    });\n  }\n\n  ngOnInit(): void {}\n\n  // SUBMIT FUNCTION FOR FORM\n  public submit(): void {\n    this.saveData().subscribe(\n      () => {\n        this.snackbarHelper.openSnackbar('Saved successfully');\n        // TODO: Change routerLink\n        this.router.navigate(['/example'], { relativeTo: this.route });\n      },\n      (e: any) => {\n        this.snackbarHelper.openSnackbar('Error saving entry', 'bg-danger');\n      }\n    );\n  }\n\n  // CALL SERVICES FOR PUT OR POST\n  private saveData(): Observable<any> {\n    // TODO: Add service for PUT and POST\n    // if (this.isEdit) {\n    //   return this.exampleService.putExamples(this.example);\n    // } else {\n    //   return this.exampleService.postExample(this.example);\n    // }\n    // TODO: Remove this line\n    return new Observable();\n  }\n}\n\n","<div class=\"row\">\n    <div class=\"col\">\n      <mat-card class=\"shadow-lg\">\n        <div class=\"row\">\n          <div class=\"col\">\n            <!-- TODO: Change headline-->\n            <h2 *ngIf=\"!isEdit\">Add Buyer</h2>\n            <h2 *ngIf=\"isEdit\">Edit Buyer</h2>\n          </div>\n          <div class=\"col text-right btnGroup\">\n            <!-- TODO: Change routerLink -->\n            <button mat-raised-button routerLink=\"/example\">Cancel</button>\n            <!-- TODO: Change formName -->\n            <button mat-raised-button color=\"primary\" type=\"submit\" form=\"exampleForm\" [disabled]=\"!exampleForm.valid\"\n              (click)=\"submit()\">Save</button>\n          </div>\n        </div>\n        <mat-divider></mat-divider>\n        <br>\n        <mat-card-content>\n          <!-- TODO: Change formName -->\n          <form id=\"exampleForm\" #exampleForm=\"ngForm\">\n            <!-- TODO: Change ngModel and mat-label and errors -->\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Column 1</mat-label>\n              <input matInput type=\"text\" name=\"column1\" [(ngModel)]=\"example.column1\" required #column1=\"ngModel\" />\n              <mat-error *ngIf=\"(column1.dirty || column1.touched) && column1.errors && column1.errors.required\">\n                Required field\n              </mat-error>\n            </mat-form-field>\n  \n            <mat-form-field appearance=\"outline\">\n              <mat-label>Column 2</mat-label>\n              <input matInput type=\"text\" name=\"column2\" [(ngModel)]=\"example.column2\" required #column2=\"ngModel\" />\n              <mat-error *ngIf=\"(column2.dirty || column2.touched) && column2.errors && column2.errors.required\">\n                Required field\n              </mat-error>\n            </mat-form-field>\n  \n            <mat-form-field appearance=\"outline\">\n              <mat-label>Column 3</mat-label>\n              <input matInput type=\"email\" name=\"column3\" [(ngModel)]=\"example.column3\" required #column3=\"ngModel\" />\n              <mat-error *ngIf=\"(column3.dirty || column3.touched) && column3.errors && column3.errors.required\">\n                Required field\n              </mat-error>\n              <mat-error\n                *ngIf=\"(column3.dirty || column3.touched) && column3.errors && column3.errors.invalid && column3.errors.required\">\n                Invalid mail\n              </mat-error>\n            </mat-form-field>\n  \n            <!-- EXAMPLE FOR SELECT (JUST IF YOU NEED IT) -->\n            <!-- TODO: Delete if not needed  -->\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Select Example</mat-label>\n              <mat-select matInput type=\"text\" name=\"column2\" [(ngModel)]=\"example.column2\" required #column2=\"ngModel\">\n                <mat-option *ngFor=\"let select of selectExample\" [value]=\"select.value\">{{select.name}}</mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"(column2.dirty || column2.touched) && column2.errors && column2.errors.required\">\n                Required field\n              </mat-error>\n            </mat-form-field>\n  \n            <!-- EXAMPLE FOR EDITOR (JUST IF YOU NEED IT) -->\n            <!-- TODO: Delete if not needed  -->\n            <angular-editor [(ngModel)]=\"example.column1\" name=\"editor\" [config]=\"editorHelper.editorConfig\">\n            </angular-editor>\n  \n          </form>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n  ","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-delete-dialog',\n  templateUrl: './delete-dialog.component.html',\n  styleUrls: ['./delete-dialog.component.scss']\n})\nexport class DeleteDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>Are you sure deleting this entry?</p>\n<mat-dialog-actions align=\"end\">\n  <button mat-button [mat-dialog-close]=\"false\">Cancel</button>\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial color=\"warn\">Delete</button>\n</mat-dialog-actions>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { Users } from '../../_models/users';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { SnackbarHelperService } from '../../_helpers/snackbar-helper.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DeleteDialogComponent } from '../../_dialogs/delete-dialog/delete-dialog.component';\nimport { UsersEditorComponent } from './users-editor/users-editor.component';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n})\nexport class UsersComponent implements OnInit {\n  @ViewChild(MatPaginator, { static: true }) paginator!: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort!: MatSort;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public users: Users[] = [];\n\n  // NAME THE COLUMNS YOU WANT TO LIST IN THE TABLE\n  // PLEASE CHECK ALSO THE HTML matColumnDef AND element.columnX\n  // TODO: Change column names here and in html\n  public displayedColumns = ['name', 'username', 'email', 'created', 'updated', 'action'];\n\n  public dataSource = new MatTableDataSource(this.users);\n\n  constructor(private dialog: MatDialog, private snackbarHelper: SnackbarHelperService) {}\n\n  ngOnInit(): void {\n    this.initData();\n  }\n\n  // GET DATA FROM SERVICE\n  private initData(): void {\n    // TODO: Add service to get all entries\n    // this.userService.getUsers().subscribe((users: Users[]) => {\n    //   this.dataSource = new MatTableDataSource(this.users);\n    //   this.dataSource.paginator = this.paginator;\n    //   this.dataSource.sort = this.sort;\n    //   this.users = users;\n    // });\n    /************ DEMO CONTENT START ************/\n    // TODO: Delete demo content\n    this.users = [\n      {\n        id: 1,\n        userName: 'jdoe',\n        email: 'jdoe@test.com',\n        firstname: 'John',\n        lastname: 'Doe',\n        created: new Date(),\n        updated: new Date()\n      }\n    ];\n    this.dataSource = new MatTableDataSource(this.users);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    /************ DEMO CONTENT END ************/\n  }\n\n  // CREATE ENTRY OPEN DIALOG\n  public create() {\n    const dialogRef = this.dialog.open(UsersEditorComponent, {\n      width: '500px'\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        this.initData();\n      }\n    });\n  }\n\n  // EDIT ENTRY OPEN DIALOG\n  public edit(user: Users) {\n    const dialogRef = this.dialog.open(UsersEditorComponent, {\n      data: user,\n      width: '500px'\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        this.initData();\n      }\n    });\n  }\n\n  // DELETE ENTRY\n  public delete(user: Users): void {\n    const dialogRef = this.dialog.open(DeleteDialogComponent);\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        // TODO: Add service to delete entry\n        // this.userService.deleteUser(user.id).subscribe(\n        //   () => {\n        //     this.snackbarHelper.openSnackbar('Successfully deleted!');\n        //   },\n        //   (err: any) => {\n        //     this.snackbarHelper.openSnackbar('Error deleting entry', 'bg-danger');\n        //   }\n        // );\n        this.initData();\n      }\n    });\n  }\n\n  // DEFINE FILTER FOR SEARCH\n  public applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n}\n","<div class=\"row\">\n  <div class=\"col\">\n    <mat-card class=\"shadow-lg\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <!-- TODO: Change headline -->\n          <h2>User Management</h2>\n        </div>\n        <div class=\"col text-right\">\n          <!-- TODO: Change button text -->\n          <button mat-raised-button color=\"primary\" (click)=\"create()\">New user</button>\n        </div>\n      </div>\n      <mat-divider></mat-divider>\n      <br>\n      <mat-card-content>\n        <div class=\"row  align-items-center\">\n          <div class=\"col text-right\">\n            <mat-form-field>\n              <mat-label>Search</mat-label>\n              <input matInput (keyup)=\"applyFilter($event)\" #input>\n            </mat-form-field>\n          </div>\n        </div>\n        <table mat-table [dataSource]=\"dataSource\" matSort>\n\n          <!-- TODO: Change matColumnDef and element.X -->\n          <ng-container matColumnDef=\"name\" sticky>\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.firstname }} {{element.lastname}}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"username\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Username</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.userName }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"email\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>E-Mail Address</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.email }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"created\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Created</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.created | date:'dd.MM.yyyy HH:mm:ss' }}</td>\n          </ng-container>\n\n\n          <ng-container matColumnDef=\"updated\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Updated</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.updated | date:'dd.MM.yyyy HH:mm:ss' }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"action\" stickyEnd>\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Action</th>\n            <td mat-cell *matCellDef=\"let element\">\n              <button mat-icon-button (click)=\"edit(element)\">\n                <mat-icon>mode_edit</mat-icon>\n              </button>\n              <button mat-icon-button (click)=\"delete(element)\">\n                <mat-icon>delete</mat-icon>\n              </button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n          <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell\" colspan=\"6\">No entries</td>\n          </tr>\n        </table>\n\n        <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\"></mat-paginator>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Examples } from '../../_models/examples';\nimport { DeleteDialogComponent } from '../../_dialogs/delete-dialog/delete-dialog.component';\nimport { SnackbarHelperService } from '../../_helpers/snackbar-helper.service';\n\n@Component({\n  selector: 'app-example',\n  templateUrl: './example.component.html',\n  styleUrls: ['./example.component.scss']\n})\nexport class ExampleComponent implements OnInit {\n  @ViewChild(MatPaginator, { static: true }) paginator!: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort!: MatSort;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public examples: Examples[] = [];\n\n  // NAME THE COLUMNS YOU WANT TO LIST IN THE TABLE\n  // PLEASE CHECK ALSO THE HTML matColumnDef AND element.columnX\n  // TODO: Change column names here and in html\n  public displayedColumns = ['column1', 'column2', 'column3', 'action'];\n\n  public dataSource = new MatTableDataSource(this.examples);\n\n  constructor(private dialog: MatDialog, private snackbarHelper: SnackbarHelperService) {}\n\n  ngOnInit(): void {\n    this.initData();\n  }\n\n  // GET DATA FROM SERVICE\n  private initData(): void {\n    // TODO: Add service to get all entries\n    // this.exampleService.getExamples().subscribe((examples: Examples[]) => {\n    //   this.dataSource = new MatTableDataSource(this.examples);\n    //   this.dataSource.paginator = this.paginator;\n    //   this.dataSource.sort = this.sort;\n    //   this.examples = examples;\n    // });\n    /************ DEMO CONTENT START ************/\n    // TODO: Delete demo content\n   \n    this.dataSource = new MatTableDataSource(this.examples);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    /************ DEMO CONTENT END ************/\n  }\n\n  // DELETE ENTRY\n  public delete(example: Examples): void {\n    const dialogRef = this.dialog.open(DeleteDialogComponent);\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        // TODO: Add service to delete entry\n        // this.exampleService.deleteExample(example.id).subscribe(\n        //   () => {\n        //     this.snackbarHelper.openSnackbar('Successfully deleted!');\n        //   },\n        //   (err: any) => {\n        //     this.snackbarHelper.openSnackbar('Error deleting entry', 'bg-danger');\n        //   }\n        // );\n        this.initData();\n      }\n    });\n  }\n\n  // DEFINE FILTER FOR SEARCH\n  public applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n}\n","<div class=\"row\">\n  <div class=\"col\">\n    <mat-card class=\"shadow-lg\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <!-- TODO: Change headline -->\n          <h2>Material</h2>\n        </div>\n        <div class=\"col text-right\">\n          <!-- TODO: Change button text -->\n          <button mat-raised-button color=\"primary\" routerLink=\"add\">New Material</button>\n        </div>\n      </div>\n      <mat-divider></mat-divider>\n      <br>\n      <mat-card-content>\n        <div class=\"row  align-items-center\">\n          <div class=\"col text-right\">\n            <mat-form-field>\n              <mat-label>Search</mat-label>\n              <input matInput (keyup)=\"applyFilter($event)\" #input>\n            </mat-form-field>\n          </div>\n        </div>\n        <table mat-table [dataSource]=\"dataSource\" matSort>\n\n          <!-- TODO: Change matColumnDef and element.X -->\n          <ng-container matColumnDef=\"column1\" sticky>\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.column1 }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"column2\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Description</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.column2 }}</td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"column3\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Quantity</th>\n            <td mat-cell *matCellDef=\"let element\">{{ element.column3 }}</td>\n          </ng-container>\n\n         \n          <ng-container matColumnDef=\"action\" stickyEnd>\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Action</th>\n            <td mat-cell *matCellDef=\"let element\">\n              <button mat-icon-button [routerLink]=\"['edit', element.id]\">\n                <mat-icon>mode_edit</mat-icon>\n              </button>\n              <button mat-icon-button (click)=\"delete(element)\">\n                <mat-icon>delete</mat-icon>\n              </button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n          <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell\" colspan=\"6\">No entries</td>\n          </tr>\n        </table>\n\n        <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\"></mat-paginator>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { DeleteDialogComponent } from 'src/app/_dialogs/delete-dialog/delete-dialog.component';\nimport { SnackbarHelperService } from 'src/app/_helpers/snackbar-helper.service';\nimport { Examples } from 'src/app/_models/examples';\n\n@Component({\n  selector: 'app-buyer',\n  templateUrl: './buyer.component.html',\n  styleUrls: ['./buyer.component.scss']\n})\nexport class BuyerComponent implements OnInit {\n\n  @ViewChild(MatPaginator, { static: true }) paginator!: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort!: MatSort;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public examples: Examples[] = [];\n\n  // NAME THE COLUMNS YOU WANT TO LIST IN THE TABLE\n  // PLEASE CHECK ALSO THE HTML matColumnDef AND element.columnX\n  // TODO: Change column names here and in html\n  public displayedColumns = ['column1', 'column2', 'column3', 'column4', 'column5', 'action'];\n\n  public dataSource = new MatTableDataSource(this.examples);\n\n  constructor(private dialog: MatDialog, private snackbarHelper: SnackbarHelperService) {}\n\n  ngOnInit(): void {\n    this.initData();\n  }\n\n  // GET DATA FROM SERVICE\n  private initData(): void {\n    // TODO: Add service to get all entries\n    // this.exampleService.getExamples().subscribe((examples: Examples[]) => {\n    //   this.dataSource = new MatTableDataSource(this.examples);\n    //   this.dataSource.paginator = this.paginator;\n    //   this.dataSource.sort = this.sort;\n    //   this.examples = examples;\n    // });\n    /************ DEMO CONTENT START ************/\n    // TODO: Delete demo content\n    this.examples = [\n      { id: 1, column1: 'Test', column2: 'test', column3: 'Test', column4: new Date(), column5: new Date() }\n    ];\n    this.dataSource = new MatTableDataSource(this.examples);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    /************ DEMO CONTENT END ************/\n  }\n\n  // DELETE ENTRY\n  public delete(example: Examples): void {\n    const dialogRef = this.dialog.open(DeleteDialogComponent);\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        // TODO: Add service to delete entry\n        // this.exampleService.deleteExample(example.id).subscribe(\n        //   () => {\n        //     this.snackbarHelper.openSnackbar('Successfully deleted!');\n        //   },\n        //   (err: any) => {\n        //     this.snackbarHelper.openSnackbar('Error deleting entry', 'bg-danger');\n        //   }\n        // );\n        this.initData();\n      }\n    });\n  }\n\n  // DEFINE FILTER FOR SEARCH\n  public applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n}\n","<div class=\"row\">\n    <div class=\"col\">\n      <mat-card class=\"shadow-lg\">\n        <div class=\"row\">\n          <div class=\"col\">\n            <!-- TODO: Change headline -->\n            <h2>Buyer</h2>\n          </div>\n          <div class=\"col text-right\">\n            <!-- TODO: Change button text -->\n            <button mat-raised-button color=\"primary\" routerLink=\"add\">New Buyer</button>\n          </div>\n        </div>\n        <mat-divider></mat-divider>\n        <br>\n        <mat-card-content>\n          <div class=\"row  align-items-center\">\n            <div class=\"col text-right\">\n              <mat-form-field>\n                <mat-label>Search</mat-label>\n                <input matInput (keyup)=\"applyFilter($event)\" #input>\n              </mat-form-field>\n            </div>\n          </div>\n          <table mat-table [dataSource]=\"dataSource\" matSort>\n  \n            <!-- TODO: Change matColumnDef and element.X -->\n            <ng-container matColumnDef=\"column1\" sticky>\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 1</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column1 }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"column2\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 2</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column2 }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"column3\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 3</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column3 }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"column4\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 4</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column4 | date:'dd.MM.yyyy HH:mm:ss' }}</td>\n            </ng-container>\n  \n  \n            <ng-container matColumnDef=\"column5\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 5</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column5 | date:'dd.MM.yyyy HH:mm:ss' }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"action\" stickyEnd>\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Action</th>\n              <td mat-cell *matCellDef=\"let element\">\n                <button mat-icon-button [routerLink]=\"['edit', element.id]\">\n                  <mat-icon>mode_edit</mat-icon>\n                </button>\n                <button mat-icon-button (click)=\"delete(element)\">\n                  <mat-icon>delete</mat-icon>\n                </button>\n              </td>\n            </ng-container>\n  \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  \n            <tr class=\"mat-row\" *matNoDataRow>\n              <td class=\"mat-cell\" colspan=\"6\">No entries</td>\n            </tr>\n          </table>\n  \n          <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\"></mat-paginator>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n  ","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackbarHelperService {\n  constructor(private snackBar: MatSnackBar) {}\n\n  public openSnackbar(text: string, color = 'bg-success'): void {\n    this.snackBar.open(text, '', {\n      duration: 4000,\n      panelClass: [color],\n      horizontalPosition: 'end',\n      verticalPosition: 'bottom'\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { EditorHelperService } from 'src/app/_helpers/editor-helper.service';\nimport { SnackbarHelperService } from 'src/app/_helpers/snackbar-helper.service';\nimport { Examples } from 'src/app/_models/examples';\n\n@Component({\n  selector: 'app-building-edit',\n  templateUrl: './building-edit.component.html',\n  styleUrls: ['./building-edit.component.scss']\n})\nexport class BuildingEditComponent implements OnInit {\n\n  public isEdit = false;\n  private id?: number;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public example: Examples = {};\n\n  // EXAMPLE FOR SELECT\n  // TODO: Delete if not needed or add service to get select options\n  public selectExample = [\n    { value: 'test', name: 'Test' },\n    { value: 'test2', name: 'Test 2' }\n  ];\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private snackbarHelper: SnackbarHelperService,\n    public editorHelper: EditorHelperService\n  ) {\n    // GET THE ID FROM ROUTE\n    // IF NO ID IS SET NEW ENTRY\n    // IF ID IS SET GET DATA FROM SERVICE AND EDIT\n    route.params.subscribe((params) => {\n      this.id = +params.id;\n      if (this.id) {\n        // TODO: Add service to get entry by id\n        // this.exampleService.getExampleId(this.id).subscribe((example: Examples) => {\n        //   this.example = example;\n        // });\n        /************ DEMO CONTENT START ************/\n        // TODO: Delete demo content\n        this.example = {\n          id: 1,\n          column1: 'Test',\n          column2: 'test',\n          column3: 'Test',\n          column4: new Date(),\n          column5: new Date()\n        };\n        /************ DEMO CONTENT END ************/\n        this.isEdit = true;\n      }\n    });\n  }\n\n  ngOnInit(): void {}\n\n  // SUBMIT FUNCTION FOR FORM\n  public submit(): void {\n    this.saveData().subscribe(\n      () => {\n        this.snackbarHelper.openSnackbar('Saved successfully');\n        // TODO: Change routerLink\n        this.router.navigate(['/example'], { relativeTo: this.route });\n      },\n      (e: any) => {\n        this.snackbarHelper.openSnackbar('Error saving entry', 'bg-danger');\n      }\n    );\n  }\n\n  // CALL SERVICES FOR PUT OR POST\n  private saveData(): Observable<any> {\n    // TODO: Add service for PUT and POST\n    // if (this.isEdit) {\n    //   return this.exampleService.putExamples(this.example);\n    // } else {\n    //   return this.exampleService.postExample(this.example);\n    // }\n    // TODO: Remove this line\n    return new Observable();\n  }\n}\n","<div class=\"row\">\n    <div class=\"col\">\n      <mat-card class=\"shadow-lg\">\n        <div class=\"row\">\n          <div class=\"col\">\n            <!-- TODO: Change headline-->\n            <h2 *ngIf=\"!isEdit\">Add Building</h2>\n            <h2 *ngIf=\"isEdit\">Edit Building</h2>\n          </div>\n          <div class=\"col text-right btnGroup\">\n            <!-- TODO: Change routerLink -->\n            <button mat-raised-button routerLink=\"/example\">Cancel</button>\n            <!-- TODO: Change formName -->\n            <button mat-raised-button color=\"primary\" type=\"submit\" form=\"exampleForm\" [disabled]=\"!exampleForm.valid\"\n              (click)=\"submit()\">Save</button>\n          </div>\n        </div>\n        <mat-divider></mat-divider>\n        <br>\n        <mat-card-content>\n          <!-- TODO: Change formName -->\n          <form id=\"exampleForm\" #exampleForm=\"ngForm\">\n            <!-- TODO: Change ngModel and mat-label and errors -->\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Column 1</mat-label>\n              <input matInput type=\"text\" name=\"column1\" [(ngModel)]=\"example.column1\" required #column1=\"ngModel\" />\n              <mat-error *ngIf=\"(column1.dirty || column1.touched) && column1.errors && column1.errors.required\">\n                Required field\n              </mat-error>\n            </mat-form-field>\n  \n            <mat-form-field appearance=\"outline\">\n              <mat-label>Column 2</mat-label>\n              <input matInput type=\"text\" name=\"column2\" [(ngModel)]=\"example.column2\" required #column2=\"ngModel\" />\n              <mat-error *ngIf=\"(column2.dirty || column2.touched) && column2.errors && column2.errors.required\">\n                Required field\n              </mat-error>\n            </mat-form-field>\n  \n            <mat-form-field appearance=\"outline\">\n              <mat-label>Column 3</mat-label>\n              <input matInput type=\"email\" name=\"column3\" [(ngModel)]=\"example.column3\" required #column3=\"ngModel\" />\n              <mat-error *ngIf=\"(column3.dirty || column3.touched) && column3.errors && column3.errors.required\">\n                Required field\n              </mat-error>\n              <mat-error\n                *ngIf=\"(column3.dirty || column3.touched) && column3.errors && column3.errors.invalid && column3.errors.required\">\n                Invalid mail\n              </mat-error>\n            </mat-form-field>\n  \n            <!-- EXAMPLE FOR SELECT (JUST IF YOU NEED IT) -->\n            <!-- TODO: Delete if not needed  -->\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Select Example</mat-label>\n              <mat-select matInput type=\"text\" name=\"column2\" [(ngModel)]=\"example.column2\" required #column2=\"ngModel\">\n                <mat-option *ngFor=\"let select of selectExample\" [value]=\"select.value\">{{select.name}}</mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"(column2.dirty || column2.touched) && column2.errors && column2.errors.required\">\n                Required field\n              </mat-error>\n            </mat-form-field>\n  \n            <!-- EXAMPLE FOR EDITOR (JUST IF YOU NEED IT) -->\n            <!-- TODO: Delete if not needed  -->\n            <angular-editor [(ngModel)]=\"example.column1\" name=\"editor\" [config]=\"editorHelper.editorConfig\">\n            </angular-editor>\n  \n          </form>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n  ","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'DefaultAngular';\n}\n","<router-outlet></router-outlet>\n","import { Component, OnInit } from '@angular/core';\nimport { Examples } from '../../../_models/examples';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { EditorHelperService } from '../../../_helpers/editor-helper.service';\nimport { SnackbarHelperService } from '../../../_helpers/snackbar-helper.service';\n\n@Component({\n  selector: 'app-example-editor',\n  templateUrl: './example-editor.component.html',\n  styleUrls: ['./example-editor.component.scss']\n})\nexport class ExampleEditorComponent implements OnInit {\n  public isEdit = false;\n  private id?: number;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public example: Examples = {};\n\n  // EXAMPLE FOR SELECT\n  // TODO: Delete if not needed or add service to get select options\n  public selectExample = [\n    { value: 'test', name: 'Test' },\n    { value: 'test2', name: 'Test 2' }\n  ];\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private snackbarHelper: SnackbarHelperService,\n    public editorHelper: EditorHelperService\n  ) {\n    // GET THE ID FROM ROUTE\n    // IF NO ID IS SET NEW ENTRY\n    // IF ID IS SET GET DATA FROM SERVICE AND EDIT\n    route.params.subscribe((params) => {\n      this.id = +params.id;\n      if (this.id) {\n        // TODO: Add service to get entry by id\n        // this.exampleService.getExampleId(this.id).subscribe((example: Examples) => {\n        //   this.example = example;\n        // });\n        /************ DEMO CONTENT START ************/\n        // TODO: Delete demo content\n        this.example = {\n          id: 1,\n          column1: 'Test',\n          column2: 'test',\n          column3: 'Test',\n          column4: new Date(),\n          column5: new Date()\n        };\n        /************ DEMO CONTENT END ************/\n        this.isEdit = true;\n      }\n    });\n  }\n\n  ngOnInit(): void {}\n\n  // SUBMIT FUNCTION FOR FORM\n  public submit(): void {\n    this.saveData().subscribe(\n      () => {\n        this.snackbarHelper.openSnackbar('Saved successfully');\n        // TODO: Change routerLink\n        this.router.navigate(['/example'], { relativeTo: this.route });\n      },\n      (e: any) => {\n        this.snackbarHelper.openSnackbar('Error saving entry', 'bg-danger');\n      }\n    );\n  }\n\n  // CALL SERVICES FOR PUT OR POST\n  private saveData(): Observable<any> {\n    // TODO: Add service for PUT and POST\n    // if (this.isEdit) {\n    //   return this.exampleService.putExamples(this.example);\n    // } else {\n    //   return this.exampleService.postExample(this.example);\n    // }\n    // TODO: Remove this line\n    return new Observable();\n  }\n}\n","<div class=\"row\">\n  <div class=\"col\">\n    <mat-card class=\"shadow-lg\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <!-- TODO: Change headline-->\n          <h2 *ngIf=\"!isEdit\">Add Material</h2>\n          <h2 *ngIf=\"isEdit\">Edit Material</h2>\n        </div>\n        <div class=\"col text-right btnGroup\">\n          <!-- TODO: Change routerLink -->\n          <button mat-raised-button routerLink=\"/example\">Cancel</button>\n          <!-- TODO: Change formName -->\n          <button mat-raised-button color=\"primary\" type=\"submit\" form=\"exampleForm\" [disabled]=\"!exampleForm.valid\"\n            (click)=\"submit()\">Save</button>\n        </div>\n      </div>\n      <mat-divider></mat-divider>\n      <br>\n      <mat-card-content>\n        <!-- TODO: Change formName -->\n        <form id=\"exampleForm\" #exampleForm=\"ngForm\">\n          <!-- TODO: Change ngModel and mat-label and errors -->\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Column 1</mat-label>\n            <input matInput type=\"text\" name=\"column1\" [(ngModel)]=\"example.column1\" required #column1=\"ngModel\" />\n            <mat-error *ngIf=\"(column1.dirty || column1.touched) && column1.errors && column1.errors.required\">\n              Required field\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Column 2</mat-label>\n            <input matInput type=\"text\" name=\"column2\" [(ngModel)]=\"example.column2\" required #column2=\"ngModel\" />\n            <mat-error *ngIf=\"(column2.dirty || column2.touched) && column2.errors && column2.errors.required\">\n              Required field\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Column 3</mat-label>\n            <input matInput type=\"email\" name=\"column3\" [(ngModel)]=\"example.column3\" required #column3=\"ngModel\" />\n            <mat-error *ngIf=\"(column3.dirty || column3.touched) && column3.errors && column3.errors.required\">\n              Required field\n            </mat-error>\n            <mat-error\n              *ngIf=\"(column3.dirty || column3.touched) && column3.errors && column3.errors.invalid && column3.errors.required\">\n              Invalid mail\n            </mat-error>\n          </mat-form-field>\n\n          <!-- EXAMPLE FOR SELECT (JUST IF YOU NEED IT) -->\n          <!-- TODO: Delete if not needed  -->\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Select Example</mat-label>\n            <mat-select matInput type=\"text\" name=\"column2\" [(ngModel)]=\"example.column2\" required #column2=\"ngModel\">\n              <mat-option *ngFor=\"let select of selectExample\" [value]=\"select.value\">{{select.name}}</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"(column2.dirty || column2.touched) && column2.errors && column2.errors.required\">\n              Required field\n            </mat-error>\n          </mat-form-field>\n\n          <!-- EXAMPLE FOR EDITOR (JUST IF YOU NEED IT) -->\n          <!-- TODO: Delete if not needed  -->\n          <angular-editor [(ngModel)]=\"example.column1\" name=\"editor\" [config]=\"editorHelper.editorConfig\">\n          </angular-editor>\n\n        </form>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { AngularEditorConfig } from '@kolkov/angular-editor';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EditorHelperService {\n  // TODO: Change editor config if needed\n  public editorConfig: AngularEditorConfig = {\n    editable: true,\n    spellcheck: true,\n    height: 'auto',\n    minHeight: '200px',\n    maxHeight: 'auto',\n    width: 'auto',\n    minWidth: '0',\n    translate: 'yes',\n    enableToolbar: true,\n    showToolbar: true,\n    placeholder: 'Enter text here...',\n    defaultParagraphSeparator: '',\n    defaultFontName: '',\n    defaultFontSize: '',\n    fonts: [\n      { class: 'arial', name: 'Arial' },\n      { class: 'times-new-roman', name: 'Times New Roman' },\n      { class: 'calibri', name: 'Calibri' },\n      { class: 'comic-sans-ms', name: 'Comic Sans MS' }\n    ],\n    customClasses: [\n      {\n        name: 'quote',\n        class: 'quote'\n      },\n      {\n        name: 'redText',\n        class: 'redText'\n      },\n      {\n        name: 'titleText',\n        class: 'titleText',\n        tag: 'h1'\n      }\n    ],\n    uploadWithCredentials: false,\n    sanitize: true,\n    toolbarPosition: 'top',\n    toolbarHiddenButtons: [['bold', 'italic'], ['fontSize']]\n  };\n\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\n\n// MODULES\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { MaterialModule } from './material.module';\nimport { AngularEditorModule } from '@kolkov/angular-editor';\n\n// INTERCEPTOR\nimport { TokenInterceptor } from './interceptor/auth.interceptor';\n\n// COMPONENTS\nimport { AppComponent } from './app.component';\nimport { MainComponent } from './main/main.component';\nimport { DashboardComponent } from './main/dashboard/dashboard.component';\nimport { ExampleComponent } from './main/example/example.component';\nimport { ExampleEditorComponent } from './main/example/example-editor/example-editor.component';\nimport { UsersComponent } from './main/users/users.component';\nimport { UsersEditorComponent } from './main/users/users-editor/users-editor.component';\nimport { LoginComponent } from './login/login.component';\nimport { DeleteDialogComponent } from './_dialogs/delete-dialog/delete-dialog.component';\nimport { ProfileDialogComponent } from './_dialogs/profile-dialog/profile-dialog.component';\nimport { BuyerComponent } from './main/buyer/buyer.component';\nimport { BuildingComponent } from './main/building/building.component';\nimport { BuyerEditComponent } from './main/buyer/buyer-edit/buyer-edit.component';\nimport { BuildingEditComponent } from './main/building/building-edit/building-edit.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainComponent,\n    DashboardComponent,\n    ExampleComponent,\n    ExampleEditorComponent,\n    UsersComponent,\n    UsersEditorComponent,\n    LoginComponent,\n    DeleteDialogComponent,\n    ProfileDialogComponent,\n    BuyerComponent,\n    BuildingComponent,\n    BuyerEditComponent,\n    BuildingEditComponent,\n \n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n    MaterialModule,\n    AngularEditorModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptor,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { DeleteDialogComponent } from 'src/app/_dialogs/delete-dialog/delete-dialog.component';\nimport { SnackbarHelperService } from 'src/app/_helpers/snackbar-helper.service';\nimport { Examples } from 'src/app/_models/examples';\n\n@Component({\n  selector: 'app-building',\n  templateUrl: './building.component.html',\n  styleUrls: ['./building.component.scss']\n})\nexport class BuildingComponent implements OnInit {\n\n  @ViewChild(MatPaginator, { static: true }) paginator!: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort!: MatSort;\n\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public examples: Examples[] = [];\n\n  // NAME THE COLUMNS YOU WANT TO LIST IN THE TABLE\n  // PLEASE CHECK ALSO THE HTML matColumnDef AND element.columnX\n  // TODO: Change column names here and in html\n  public displayedColumns = ['column1', 'column2', 'column3', 'column4', 'column5', 'action'];\n\n  public dataSource = new MatTableDataSource(this.examples);\n\n  constructor(private dialog: MatDialog, private snackbarHelper: SnackbarHelperService) {}\n\n  ngOnInit(): void {\n    this.initData();\n  }\n\n  // GET DATA FROM SERVICE\n  private initData(): void {\n    // TODO: Add service to get all entries\n    // this.exampleService.getExamples().subscribe((examples: Examples[]) => {\n    //   this.dataSource = new MatTableDataSource(this.examples);\n    //   this.dataSource.paginator = this.paginator;\n    //   this.dataSource.sort = this.sort;\n    //   this.examples = examples;\n    // });\n    /************ DEMO CONTENT START ************/\n    // TODO: Delete demo content\n    this.examples = [\n      { id: 1, column1: 'Test', column2: 'test', column3: 'Test', column4: new Date(), column5: new Date() }\n    ];\n    this.dataSource = new MatTableDataSource(this.examples);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    /************ DEMO CONTENT END ************/\n  }\n\n  // DELETE ENTRY\n  public delete(example: Examples): void {\n    const dialogRef = this.dialog.open(DeleteDialogComponent);\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        // TODO: Add service to delete entry\n        // this.exampleService.deleteExample(example.id).subscribe(\n        //   () => {\n        //     this.snackbarHelper.openSnackbar('Successfully deleted!');\n        //   },\n        //   (err: any) => {\n        //     this.snackbarHelper.openSnackbar('Error deleting entry', 'bg-danger');\n        //   }\n        // );\n        this.initData();\n      }\n    });\n  }\n\n  // DEFINE FILTER FOR SEARCH\n  public applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n}\n","<div class=\"row\">\n    <div class=\"col\">\n      <mat-card class=\"shadow-lg\">\n        <div class=\"row\">\n          <div class=\"col\">\n            <!-- TODO: Change headline -->\n            <h2>Building</h2>\n          </div>\n          <div class=\"col text-right\">\n            <!-- TODO: Change button text -->\n            <button mat-raised-button color=\"primary\" routerLink=\"add\">New Building</button>\n          </div>\n        </div>\n        <mat-divider></mat-divider>\n        <br>\n        <mat-card-content>\n          <div class=\"row  align-items-center\">\n            <div class=\"col text-right\">\n              <mat-form-field>\n                <mat-label>Search</mat-label>\n                <input matInput (keyup)=\"applyFilter($event)\" #input>\n              </mat-form-field>\n            </div>\n          </div>\n          <table mat-table [dataSource]=\"dataSource\" matSort>\n  \n            <!-- TODO: Change matColumnDef and element.X -->\n            <ng-container matColumnDef=\"column1\" sticky>\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 1</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column1 }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"column2\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 2</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column2 }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"column3\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 3</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column3 }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"column4\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 4</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column4 | date:'dd.MM.yyyy HH:mm:ss' }}</td>\n            </ng-container>\n  \n  \n            <ng-container matColumnDef=\"column5\">\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Column 5</th>\n              <td mat-cell *matCellDef=\"let element\">{{ element.column5 | date:'dd.MM.yyyy HH:mm:ss' }}</td>\n            </ng-container>\n  \n            <ng-container matColumnDef=\"action\" stickyEnd>\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Action</th>\n              <td mat-cell *matCellDef=\"let element\">\n                <button mat-icon-button [routerLink]=\"['edit', element.id]\">\n                  <mat-icon>mode_edit</mat-icon>\n                </button>\n                <button mat-icon-button (click)=\"delete(element)\">\n                  <mat-icon>delete</mat-icon>\n                </button>\n              </td>\n            </ng-container>\n  \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  \n            <tr class=\"mat-row\" *matNoDataRow>\n              <td class=\"mat-cell\" colspan=\"6\">No entries</td>\n            </tr>\n          </table>\n  \n          <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\"></mat-paginator>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n  ","import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { NavItem } from '../_models/nav';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MenuService {\n  // TODO: Change menu items\n\n  public main: NavItem[] = [];\n\n  public components: NavItem[] = [\n    {\n      displayName: 'Dashboard',\n      iconName: 'dashboard',\n      route: '/dashboard'\n    },\n    {\n      displayName: 'Material',\n      iconName: 'list_alt',\n      route: '/material'\n    },\n    {\n      displayName: 'Buyer',\n      iconName: 'list_alt',\n      route: '/buyer'\n    },\n    {\n      displayName: 'Building',\n      iconName: 'list_alt',\n      route: '/building'\n    }\n  ];\n\n  public settings: NavItem[] = [\n    {\n      displayName: 'User Management',\n      iconName: 'people',\n      route: '/users'\n    }\n  ];\n\n  public currentUrl = new BehaviorSubject<string>('');\n\n  constructor(private router: Router) {\n    this.router.events.subscribe((event) => {\n      this.findMenuItem(event);\n      setTimeout(() => {\n        this.findMenuItem(event);\n      }, 1000);\n      if (event instanceof NavigationEnd) {\n        this.currentUrl.next(event.urlAfterRedirects);\n      }\n    });\n  }\n\n  private findMenuItem(event: any) {\n    let menuItem = [];\n    const temp1 = this.main.filter((i) => i.route === event.url);\n    const temp2 = this.components.filter((i) => i.route === event.url);\n    const temp3 = this.settings.filter((i) => i.route === event.url);\n    if (temp1.length > 0) {\n      menuItem = temp1;\n    } else if (temp2.length > 0) {\n      menuItem = temp2;\n    } else if (temp3.length > 0) {\n      menuItem = temp3;\n    } else {\n      return;\n    }\n    if (menuItem[0].disabled) {\n      this.router.navigate(['/']);\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"row\">\n  <div class=\"col\">\n    <mat-card class=\"shadow-lg\">\n      <h2>Dashboard</h2>\n      <mat-divider></mat-divider>\n      <br>\n    </mat-card>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MainComponent } from './main/main.component';\nimport { DashboardComponent } from './main/dashboard/dashboard.component';\nimport { ExampleComponent } from './main/example/example.component';\nimport { ExampleEditorComponent } from './main/example/example-editor/example-editor.component';\nimport { UsersComponent } from './main/users/users.component';\nimport { LoginComponent } from './login/login.component';\nimport { BuyerComponent } from './main/buyer/buyer.component';\nimport { BuildingComponent } from './main/building/building.component';\nimport { BuyerEditComponent } from './main/buyer/buyer-edit/buyer-edit.component';\nimport { BuildingEditComponent } from './main/building/building-edit/building-edit.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MainComponent,\n    children: [\n      {\n        path: 'dashboard',\n        component: DashboardComponent\n      },\n      {\n        path: 'material',\n        component: ExampleComponent\n      },\n      {\n        path: 'material/edit/:id',\n        component: ExampleEditorComponent\n      },\n      {\n        path: 'material/add',\n        component: ExampleEditorComponent\n      },\n      {\n        path: 'buyer',\n        component: BuyerComponent\n      }, \n      {\n        path: 'buyer/edit/:id',\n        component: BuyerEditComponent\n      },\n      {\n        path: 'buyer/add',\n        component: BuyerEditComponent\n      },\n      {\n        path: 'building',\n        component: BuildingComponent\n      },\n      {\n        path: 'building/edit/:id',\n        component: BuildingEditComponent\n      },\n      {\n        path: 'building/add',\n        component: BuildingEditComponent\n      },\n      {\n        path: 'users',\n        component: UsersComponent\n      }\n    ]\n  },\n  {\n    path: 'login',\n    component: LoginComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Login } from '../_models/login';\nimport { Router } from '@angular/router';\nimport { SnackbarHelperService } from '../_helpers/snackbar-helper.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  // ADD YOUR MODEL HERE\n  // TODO: Add model\n  public loginUser: Login = {};\n\n  constructor(private router: Router, private snackbarHelper: SnackbarHelperService) {}\n\n  ngOnInit(): void {}\n\n  // SUBMIT FUNCTION FOR FORM\n  public login(): void {\n    this.doLogin().subscribe(\n      (resp: any) => {\n        // TODO: Store data you need\n        localStorage.setItem('token', resp.authToken);\n        localStorage.setItem('user', resp.user);\n        this.router.navigateByUrl('/');\n      },\n      (e: any) => {\n        this.snackbarHelper.openSnackbar('Error logging in', 'bg-danger');\n      }\n    );\n  }\n\n  // CALL SERVICES FOR PUT OR POST\n  private doLogin(): Observable<any> {\n    // TODO: Add service for login\n    // return this.authService.postApiAuth(this.loginUser);\n    // TODO: Remove this line\n    return new Observable();\n  }\n}\n","<div class=\"container-fluid d-flex h-100\">\n  <div class=\"login col-xl-3 col-sm-4 m-auto\">\n    <div class=\"logo pb-4\">\n      <img class=\"img-fluid\" src=\"../../assets/logos/logo.png\" />\n    </div>\n\n    <mat-card>\n      <mat-card-header class=\"justify-content-center\">\n        <mat-card-title>Login</mat-card-title>\n      </mat-card-header>\n      <div class=\"px-3\">\n        <form #loginForm=\"ngForm\" (ngSubmit)=\"login()\">\n          <mat-card-content>\n            <mat-form-field class=\"d-block\" appearance=\"outline\">\n              <mat-label>Username</mat-label>\n              <input matInput type=\"text\" required [(ngModel)]=\"loginUser.username\" name=\"username\"\n                #username=\"ngModel\" />\n              <mat-icon matSuffix>person</mat-icon>\n              <mat-error [hidden]=\"username.valid || username.pristine\"><strong>required</strong></mat-error>\n            </mat-form-field>\n\n            <mat-form-field class=\"d-block pt-3\" appearance=\"outline\">\n              <mat-label>Password</mat-label>\n              <input matInput type=\"password\" required [(ngModel)]=\"loginUser.password\" name=\"password\"\n                #password=\"ngModel\" />\n              <mat-icon matSuffix>lock</mat-icon>\n              <mat-error [hidden]=\"password.valid || password.pristine\"><strong>required</strong></mat-error>\n            </mat-form-field>\n          </mat-card-content>\n          <mat-card-actions align=\"end\">\n            <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!loginForm.form.valid\">\n              Login\n            </button>\n          </mat-card-actions>\n        </form>\n      </div>\n    </mat-card>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n// Material Navigation\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n// Material Layout\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatListModule } from '@angular/material/list';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatTreeModule } from '@angular/material/tree';\n// Material Buttons & Indicators\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatRippleModule } from '@angular/material/core';\n// Material Popups & Modals\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n// Material Data tables\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    MatAutocompleteModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatListModule,\n    MatStepperModule,\n    MatTabsModule,\n    MatTreeModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatBadgeModule,\n    MatChipsModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatRippleModule,\n    MatBottomSheetModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    MatTooltipModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatTableModule,\n    LayoutModule\n  ],\n  exports: [\n    MatAutocompleteModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatListModule,\n    MatStepperModule,\n    MatTabsModule,\n    MatTreeModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatBadgeModule,\n    MatChipsModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatRippleModule,\n    MatBottomSheetModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    MatTooltipModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatTableModule,\n    LayoutModule\n  ]\n})\nexport class MaterialModule {}\n","import { BreakpointObserver } from '@angular/cdk/layout';\nimport { Component, OnInit } from '@angular/core';\nimport { MenuService } from '../_services/menu.service';\nimport { NavItem } from '../_models/nav';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ProfileDialogComponent } from '../_dialogs/profile-dialog/profile-dialog.component';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n  public isSmallScreen = false;\n\n  main = this.menuService.main;\n  components = this.menuService.components;\n  settings = this.menuService.settings;\n\n  mainLength = 0;\n  componentsLength = 0;\n  settingsLength = 0;\n\n  constructor(\n    breakpointObserver: BreakpointObserver,\n    private menuService: MenuService,\n    private dialog: MatDialog,\n    private router: Router\n  ) {\n    this.isSmallScreen = breakpointObserver.isMatched('(min-width: 1000px)');\n    breakpointObserver.observe('(min-width: 1000px)').subscribe((result) => {\n      this.isSmallScreen = result.matches;\n    });\n  }\n\n  ngOnInit(): void {\n    this.main.forEach((item) => {\n      setTimeout(() => {\n        if (!item.disabled) {\n          this.mainLength++;\n        }\n      });\n      this.checkCurrentUrl(item);\n    });\n\n    this.components.forEach((item) => {\n      setTimeout(() => {\n        if (!item.disabled) {\n          this.componentsLength++;\n        }\n      });\n      this.checkCurrentUrl(item);\n    });\n\n    this.settings.forEach((item) => {\n      setTimeout(() => {\n        if (!item.disabled) {\n          this.settingsLength++;\n        }\n      });\n      this.checkCurrentUrl(item);\n    });\n  }\n\n  checkCurrentUrl(item: NavItem): void {\n    this.menuService.currentUrl.subscribe((url: string) => {\n      if (item.route && url) {\n        item.expanded = url.indexOf(`${item.route}`) === 0;\n      }\n    });\n  }\n\n  closeNav(snav: any): void {\n    if (!this.isSmallScreen) {\n      snav.close();\n    }\n  }\n\n  logout(): void {\n    // TODO: Add logout function\n    localStorage.clear();\n    this.router.navigateByUrl('/login');\n  }\n\n  editProfile(): void {\n    /************ DEMO CONTENT START ************/\n    // TODO: Delete demo content\n    const user = {\n      id: 1,\n      userName: 'jdoe',\n      email: 'jdoe@test.com',\n      firstname: 'John',\n      lastname: 'Doe',\n      created: new Date(),\n      updated: new Date()\n    };\n    /************ DEMO CONTENT END ************/\n    // TODO: Add get user (e.g. from localStorage)\n    this.dialog.open(ProfileDialogComponent, {\n      data: user,\n      width: '500px'\n    });\n  }\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #snav [opened]=\"isSmallScreen\" [mode]=\"isSmallScreen ? 'side' : 'over'\" #drawer class=\"sidenav shadow-lg\"\n    fixedInViewport attr.role=\"navigation\">\n    <mat-toolbar style=\"background-color: white;\">\n      <span class=\"toolbar-header\"><b>Construction</b>App</span>\n      <span class=\"toolbar-spacer\"></span>\n\n    </mat-toolbar>\n    <mat-divider></mat-divider>\n    <mat-nav-list>\n      <div *ngFor=\"let item of main\">\n        <div *ngIf=\"!item.disabled\">\n          <a mat-list-item [routerLink]=\"item.route\" routerLinkActive=\"active\" (click)=\"closeNav(snav)\">\n            <mat-icon mat-list-icon>{{item.iconName}}</mat-icon>\n            <div mat-line>{{item.displayName}}</div>\n            <span *ngIf=\"item.children && item.children.length\">\n              <mat-icon [@indicatorRotate]=\"item.expanded ? 'expanded': 'collapsed'\">\n                expand_more\n              </mat-icon>\n            </span>\n          </a>\n          <div *ngIf=\"item.expanded\">\n            <a mat-list-item *ngFor=\"let child of item.children\" [routerLink]=\"child.route\" class=\"subnav\"\n              (click)=\"closeNav(snav)\">\n              <mat-icon mat-list-icon>{{child.iconName}}</mat-icon>\n              <div mat-line>{{child.displayName}}</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div *ngFor=\"let item of components\">\n        <div *ngIf=\"!item.disabled\">\n          <a mat-list-item [routerLink]=\"item.route\" routerLinkActive=\"active\" (click)=\"closeNav(snav)\">\n            <mat-icon mat-list-icon>{{item.iconName}}</mat-icon>\n            <div mat-line>{{item.displayName}}</div>\n            <span *ngIf=\"item.children && item.children.length\">\n              <mat-icon [@indicatorRotate]=\"item.expanded ? 'expanded': 'collapsed'\">\n                expand_more\n              </mat-icon>\n            </span>\n          </a>\n          <div *ngIf=\"item.expanded\">\n            <a mat-list-item *ngFor=\"let child of item.children\" [routerLink]=\"child.route\" class=\"subnav\"\n              (click)=\"closeNav(snav)\">\n              <mat-icon mat-list-icon>{{child.iconName}}</mat-icon>\n              <div mat-line>{{child.displayName}}</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div *ngFor=\"let item of settings\" class=\"bottomMenu\">\n        <mat-divider></mat-divider>\n        <div *ngIf=\"!item.disabled\">\n          <a mat-list-item [routerLink]=\"item.route\" routerLinkActive=\"active\" (click)=\"closeNav(snav)\">\n            <mat-icon mat-list-icon>{{item.iconName}}</mat-icon>\n            <div mat-line>{{item.displayName}}</div>\n            <span *ngIf=\"item.children && item.children.length\">\n              <mat-icon [@indicatorRotate]=\"item.expanded ? 'expanded': 'collapsed'\">\n                expand_more\n              </mat-icon>\n            </span>\n          </a>\n          <div *ngIf=\"item.expanded\">\n            <a mat-list-item *ngFor=\"let child of item.children\" [routerLink]=\"child.route\" class=\"subnav\"\n              (click)=\"closeNav(snav)\">\n              <mat-icon mat-list-icon>{{child.iconName}}</mat-icon>\n              <div mat-line>{{child.displayName}}</div>\n            </a>\n          </div>\n        </div>\n      </div>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar class=\"shadow-lg\">\n      <button type=\"button\" aria-label=\"Toggle sidenav\" align=\"end\" mat-icon-button (click)=\"drawer.toggle()\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span class=\"toolbar-spacer\"></span>\n      <button mat-button style=\"float: right;\" (click)=\"editProfile()\">\n        <mat-icon>person</mat-icon>\n      </button>\n      <button mat-button style=\"float: right;\" (click)=\"logout()\">\n        <mat-icon>logout</mat-icon>\n      </button>\n\n    </mat-toolbar>\n\n    <div class=\"container-fluid\">\n      <router-outlet></router-outlet>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}